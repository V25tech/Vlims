//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Text;
    using System.Xml.Serialization;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.Extensions.Hosting;
    using Spire.Doc;
    using Spire.Doc.Documents;
    using Vlims.Common;
    using Vlims.DocumentManager.Manager;
    using Vlims.DocumentMaster.DataAccess;
    using Vlims.DocumentMaster.Entities;
    using Vlims.DocumentMaster.Manager;
    using FileFormat = Spire.Doc.FileFormat;
    using System.Drawing.Printing;
    using DocumentFormat.OpenXml.Packaging;
    using iTextSharp.text.pdf;
    using Microsoft.SharePoint.Client;
    using System.ComponentModel;
    using Vlims.DMS.Entities;
    using Vlims.DocumentManager.DataAccess;
    using DocumentFormat.OpenXml.Wordprocessing;
    using Document = Spire.Doc.Document;
    using PageSize = Spire.Doc.Documents.PageSize;
    using Paragraph = Spire.Doc.Documents.Paragraph;
    using Vlims.DocumentMaster.Manager.Interface;
    using iTextSharp.text.pdf.qrcode;
    using System.Drawing;
    using Microsoft.AspNetCore.Http;


    /// <summary>
    /// Comment
    /// </summary>
    [ApiController()]
    [Route("api/documenttemplateconfiguration")]
    public class DocumentTemplateConfigurationController : ControllerBase
    {

        private readonly IDocumentTemplateConfigurationService documentTemplateConfigurationService;
        private readonly IAzureBlobService azureBlobService;

        private readonly string htmlUpper = "<html>\r\n<head>\r\n<style type=\"text/css\">\r\n        li, p, table {\r\n            font-family: 'Lucida Sans Unicode', sans-serif;\r\n            font-size: 14pt;\r\n        }\r\n\t\ttable {\r\n            font-family: 'Lucida Sans Unicode', sans-serif;\r\n            font-size: 14pt;\r\n            border: 1px solid black; /* Set border to 1px solid black */\r\n            width: 100%;\r\n        }\r\n</style>\r\n</head>\r\n<body>";
        private readonly string htmllower = "</body>\r\n</html>";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="documentTemplateConfigurationService"></param>
        public DocumentTemplateConfigurationController(IDocumentTemplateConfigurationService documentTemplateConfigurationService, IAzureBlobService _azureBlobService)
        {
            this.documentTemplateConfigurationService = documentTemplateConfigurationService;
            this.azureBlobService = _azureBlobService;
        }

        /// <summary>
        /// This method is used to Get List of DocumentTemplateConfiguration
        /// </summary>
        /// <param name="requestContext"></param>
        [HttpPost("getalldoctemplate")]
        public ActionResult GetAllDocumentTemplateConfiguration([FromQuery] RequestContext requestContext)
        {
            var result = documentTemplateConfigurationService.GetAllDocumentTemplateConfiguration(requestContext);
            return Ok(result);
        }

        /// <summary>
        /// This method is used to Get DocumentTemplateConfiguration By Id dTID
        /// </summary>
        /// <param name="dTID"></param>
        [HttpGet("getbyId")]
        public ActionResult<DocumentTemplateConfiguration> GetDocumentTemplateConfigurationByDTID(int dTID)
        {
            var result = documentTemplateConfigurationService.GetDocumentTemplateConfigurationByDTID(dTID);
            return result;
        }
        /// <summary>
        /// This method is used to Get DocumentTemplateConfiguration By Name
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        [HttpGet("getbyName")]
        public ActionResult GetDocumentTemplateConfigurationByName(string name)
        {
            DocumentTemplateConfiguration responseContext = new DocumentTemplateConfiguration();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber = 1;
            requestContext.PageSize = 50;
            var result = documentTemplateConfigurationService.GetAllDocumentTemplateConfiguration(requestContext);
            if (result != null)
            {
                responseContext = result.Response.FirstOrDefault(o => o.Templatename.Equals(name, StringComparison.InvariantCultureIgnoreCase));
            }
            return Ok(responseContext);
        }
        [HttpPost("upload-image")]
        public IActionResult UploadImage(IFormFile image)
        {
            try
            {
                if (image != null && image.Length > 0)
                {
                    var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "Logo");
                    if (!Directory.Exists(uploadsFolder))
                        Directory.CreateDirectory(uploadsFolder);
                    var uniqueFileName = $"{Path.GetRandomFileName()}_{image.FileName}";

                    var filePath = Path.Combine(uploadsFolder, uniqueFileName);
                    using (var stream = new FileStream(filePath, FileMode.Create))
                    {
                        image.CopyTo(stream);
                    }

                    return Ok(new { Success = true, Message = uniqueFileName });
                }

                return BadRequest("Invalid image file");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
        /// <summary>
        /// This Method is used to Save DocumentTemplateConfiguration
        /// </summary>
        /// <param name="documentTemplateConfiguration"></param>
        [HttpPost("savedocumenttemplateconfiguration")]
        public ActionResult<System.Boolean> SaveDocumentTemplateConfiguration(DocumentTemplateConfiguration documentTemplateConfiguration)
        {
            var result = documentTemplateConfigurationService.SaveDocumentTemplateConfiguration(documentTemplateConfiguration);
            return result;
        }

        [HttpGet("isduplicate")]
        public ActionResult<System.Boolean> IsTemplateDuplicate(string p_template)
        {
            var result = documentTemplateConfigurationService.IsTemplateDuplicate(p_template);
            return result;
        }

        /// <summary>
        /// This Method is used to update DocumentTemplateConfiguration
        /// </summary>
        /// <param name="documentTemplateConfiguration"></param>
        [HttpPost("updatedocumenttemplateconfiguration")]
        public ActionResult<System.Boolean> UpdateDocumentTemplateConfiguration(DocumentTemplateConfiguration documentTemplateConfiguration)
        {
            var result = documentTemplateConfigurationService.UpdateDocumentTemplateConfiguration(documentTemplateConfiguration);
            return result;
        }

        /// <summary>
        /// This Method is used to Delete DocumentTemplateConfiguration By Id dTID
        /// </summary>
        /// <param name="dTID"></param>
        [HttpDelete("{dTID}")]
        public ActionResult<bool> DeleteDocumentTemplateConfigurationByDTID(int dTID)
        {
            var result = documentTemplateConfigurationService.DeleteDocumentTemplateConfigurationByDTID(dTID);
            return result;
        }

        /// <summary>
        /// This Method is used to Delete DocumentTemplateConfiguration By Multiple ids dTIDs
        /// </summary>
        /// <param name="dTIDs"></param>
        [HttpDelete("deleteAll")]
        public ActionResult<bool> DeleteAllDocumentTemplateConfiguration(List<int> dTIDs)
        {
            var result = documentTemplateConfigurationService.DeleteAllDocumentTemplateConfiguration(dTIDs);
            return result;
        }
        [HttpGet("getpath")]
        public ActionResult GetPath()
        {
            // Get the current request's host address dynamically
            var hostAddress = $"{HttpContext.Request.Scheme}://{HttpContext.Request.Host}/pdfs/DocumentWithHeaderTable.pdf";
            string pdfFilePath = Path.Combine(Directory.GetCurrentDirectory(), "DocumentWithHeaderTable.pdf");
            return Ok(hostAddress);
        }

        [HttpGet("checkfileexist")]
        public async Task<IActionResult> CheckFileExist(string filename)
        {
            if (string.IsNullOrEmpty(filename))
                return BadRequest("Please provide filename");

            filename = filename.Replace("/", "_");
            return Ok(await azureBlobService.CheckFileExist(filename));
        }

        [HttpGet("deletefile")]
        public async Task<IActionResult> DeleteFile(string filename)
        {
            if (string.IsNullOrEmpty(filename))
                return BadRequest("Please provide filename");

            filename = filename.Replace("/", "_");
            return Ok(await azureBlobService.DeleteFile(filename));
        }

        [HttpPost("upload")]
        public async Task<IActionResult> UploadFile(IFormFile file, string filename)
        {
            try
            {
                if (string.IsNullOrEmpty(filename))
                    return BadRequest("Please provide filename");

                filename = filename.Replace("/", "_");
                string uniqueFileName = filename + Path.GetExtension(file.FileName);

                var resp = await azureBlobService.UploadFiles(file, uniqueFileName).ConfigureAwait(false);

                return Ok(new { message = "File uploaded successfully.", uniqueFileName });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"An error occurred while uploading the file: {ex.Message}");
            }
        }

        [HttpGet("getpdf")]
        public ActionResult<byte[]> getpdf(string templateinf, string p_user, int p_PrepId, bool p_IsShortHeader = false, bool p_isPdf = true)
        {

            byte[] bytes = null; DocumentPreparation preparation = new DocumentPreparation();
            DataSet dataset = DocumentTemplateConfigurationData.GetDocumentTemplateConfigurationByTemplate(templateinf, p_PrepId);
            DataSet ds_template = DocumentTemplateConfigurationData.GetTemplateHeaderFooterDetails(templateinf, p_PrepId);
            DocumentTemplateConfiguration template = DocumentTemplateConfigurationConverter.SetDocumentTemplateConfiguration(dataset);
            DocumentTemplateConfiguration template1 = DocumentTemplateConfigurationConverter.SetDocumentTemplateHeaderFooterConfiguration(ds_template);
            if (template1 != null)
            {
                DataSet dp_dataset = DocumentPreparationData.GetDocumentPreparationByDPNID(Convert.ToInt32(template1.DTID));
                preparation = DocumentPreparationConverter.SetDocumentPreparation(dp_dataset);
            }
            if (template != null && !string.IsNullOrEmpty(template.CloneTemp))
            {
                template = DocumentTemplateConfigurationConverter.SetDocumentTemplateCloneConfigurationt(dataset);
            }

            StringBuilder builder = new StringBuilder();
            builder.Append(htmlUpper);
            string path = Path.Combine(Directory.GetCurrentDirectory(), "license.elic.xml");
            Spire.Doc.License.LicenseProvider.SetLicenseKey("WvtdM0tgFa8XiB8F7gEAR9R1U39T0e/M6VlIioRtnK5g2tSYpSuvGRVGG1uZFO2J3v//LCp2R2TS1svhfq7TdyW11Fsgs3pdlnvRqw9OMSWW/FnwQNUVTqkrd+QQLRLgBc52laUB3FcWoilx1xmWTEk3m5BomGGblm7D/jz5pSvPMyILotWzOO9ipp7QhImzbM9Ig89mw0NHiAp56o2HwRHdzVaC2STV08N007sgAOxQhcNFvSa4tjxD7LB5L17npCdDN298bXBcGwMp188GRFpTaY4h1bIHq2kIr3Ddds5x7KOQhA4rW2QkOTuxyGeLCj8YzPj3VqptEsng23iqtRrj4T0HhRHmoTn09HcWuAgyGfFoaM9kOPWJh60qJ3EnEg+37+JWqY8rfiOq/Taoj+C8KUj+/eTwzU1f+Ags0fIDxGVeLF+ESqGsYqysPqRl618arjLxztpn0a7fO3QtS1taL487B8Lr3E3D7oHKxcYNgEluIClyQM0k3VE3H/ZbqQPLP1uYJvtGulPTqzwjIL6+qtm6XX0YaqejoISrghBo1JhT3ZIUOPTfzW/DTVCRVElbwux+6KTtufYAY6CUDKfa42GGDyuGFiQjtGkhwlukiYAvTc8XJSEfQXTsdVe701ppRUGgJnNF3NVQX+wyoE3d/fyccYFs/S0IiPOSZ8Yotxytpsqy1BESubay/Azds9t+Lqb3iT2abcaGJ3zajckS9/z8RBnKcsG0PScPyeAqvzOof9JQjnsM00J2D/hyc1PxAFrnaoHkhqjaEaAOCm1PQdERN2KsSjdi1dwlBtNbTBTmqFfiI86ixigVTHcPW0/2hZDwYTVhP/I9VtjFgb7Gt+WJs3cFzdgn5cHXI8SuToiwqJzLN++LZfVF1gM8NqqQavpzCoHpg+AaTWKoJ589m5B6v1tYQlhSqE0EmXZCbPJ5Flx12EgMTRMbrzMhZxiQiZxJfxmCCGuVvcQuvWV9ji3IKeEGBBiD17gyIWuAWm6orzq+fOJX/hAxlGUaPUPOjVOFqMFZk+sPYWqf8dww3tcRo+hG0oOyfqtfUbcsYort8XSyWUiLxlx59Rom7AgajjmROcRo/KMStZF7L5SrazuEbO/Go/9jZiSda0GCelbpgO0OCxWB/4FMr3RDIbicpxGHRq50HXK4nJ2yoYPqPO9af6Y2MJ0dSCo1/XL+yy78KRRlFlBWb1mS2f9BXvNQqIyqsiJRURqJFf/flAKeyQJfqXTtJg1r2kVovKcMtx40C3lOqUaBj6j+2n+2m+HTtyjkUb97f7F5FumDdO2ZSAQGDVt2iZ4Jhf72ROX/I9r32k1saXxHVWfRN0ERYUVvLf4cUcvl0BAZWlXF5uQOOh9f0LTgqg3xtjGu1rgHq7Tvcp31Zcb2Ia5p9WhWPJlRm+Ny52msW7CHeFqhS7Q1yFoCnh86hJFZBrkNzklKFj0lc3DXi5VxmMRqB+e++5MfAnCmaqGqbkikUVcXzu7EgTPOoX2ZL/AUDmf+yCFK3uCdazr9TPx/q5BVeS1amTU6+9f9QkO74Kta+auD3HGYmU63HIDIUOy2LsjsoGwLgih1ywj/RLf90+D0uoQNGK1Tdy2MC4w=");
            Document document = new Spire.Doc.Document();
            string filename = template1.DocumentNo.Replace("/", "_") + ".docx";
            var byteArray = azureBlobService.GetFileFromAzure(filename);

            Stream stream = new MemoryStream(byteArray);
            document.LoadFromStream(stream, FileFormat.Docx, XHTMLValidationType.None);
            Section section = document.Sections[0];
            section.PageSetup.PageSize = PageSize.A4;
            section.PageSetup.Margins.All = 72f;

            string ac = document.GetText();

            //section.PageSetup.Margins.Top = 0f;
            //section.PageSetup.Margins.Bottom = 0f;

            HeaderFooter footer = section.HeadersFooters.Footer;
            Paragraph footerParagraph = footer.AddParagraph();
            StringBuilder footerbuilder = new StringBuilder();
            footerbuilder.Append(htmlUpper);
            if (p_IsShortHeader)
                footerbuilder.Append(TemplatePreparation.PrepareStaticdiv(template, template1, p_user));
            if (!p_IsShortHeader)
            {
                footerbuilder.Append(TemplatePreparation.PrepareshortheaderFooterdiv(template, template1, p_user));
            }
            footerbuilder.Append(htmllower);
            footerParagraph.AppendHTML(footerbuilder.ToString());
            footerParagraph.Format.BeforeSpacing = 0;
            footerParagraph.Format.AfterSpacing = 0;
            footerParagraph.Format.PageBreakBefore = false;

            int i = 0;
            HeaderFooter header = section.HeadersFooters.Header;
            Paragraph headerParagraph = header.AddParagraph();
            StringBuilder headerbuilder = new StringBuilder();
            headerbuilder.Append(htmlUpper);
            var totalPages = document.PageCount - 1;
            if (!p_IsShortHeader)
            {
                headerbuilder.Append(TemplatePreparation.PrepareShortHeader(template, template1, i + 1, preparation, totalPages, p_user));
            }
            else if (template.documenttype.Equals("BATCH PACKING RECORD 08", StringComparison.InvariantCultureIgnoreCase))
            {
                headerbuilder.Append(TemplatePreparation.PrepareBMRHeader(template, template1, i + 1, preparation));
            }
            else if (template.documenttype.Equals("BATCH PACKING RECORD", StringComparison.InvariantCultureIgnoreCase))
            {
                headerbuilder.Append(TemplatePreparation.PrepareBMRHeader(template, template1, i + 1, preparation));
            }
            else if (template.documenttype.Equals("BATCH MANUFACTURING RECORD", StringComparison.InvariantCultureIgnoreCase))
            {
                headerbuilder.Append(TemplatePreparation.PrepareBMRHeader(template, template1, i + 1, preparation));
            }
            else if (template.documenttype.Equals("STANDARD OPERATING PROCEDURE", StringComparison.InvariantCultureIgnoreCase))
            {
                headerbuilder.Append(TemplatePreparation.PrepareHeaderStaticdiv(template, template1, i + 1, preparation, totalPages));
            }
            else if (template.documenttype.Equals("STANDARD TESTING PROCEDURE", StringComparison.InvariantCultureIgnoreCase))
            {
                headerbuilder.Append(TemplatePreparation.PrepareSTPHeader(template, template1, i + 1, preparation));
            }
            else if (template.documenttype.Equals("STANDARD TESTING SPECIFICATION", StringComparison.InvariantCultureIgnoreCase))
            {
                headerbuilder.Append(TemplatePreparation.PrepareSTPHeader(template, template1, i + 1, preparation));
            }
            else if (template.documenttype.Equals("Validation Protocol", StringComparison.InvariantCultureIgnoreCase))
            {
                headerbuilder.Append(TemplatePreparation.PrepareSTPHeader(template, template1, i + 1, preparation));
            }
            else
                headerbuilder.Append(TemplatePreparation.PrepareHeaderStaticdiv(template, template1, i + 1, preparation, totalPages));

            headerbuilder.Append(htmllower);
            headerParagraph.AppendHTML(headerbuilder.ToString());
            headerParagraph.Format.BeforeSpacing = 0;
            headerParagraph.Format.AfterSpacing = 0;
            headerParagraph.Format.PageBreakBefore = false;

            HeaderFooter footer1 = section.HeadersFooters.Footer;
            // Add "page number / page count" to the footer

            Paragraph footerParagraph1 = footer1.AddParagraph();
            footerParagraph1.AppendText("Page No - ");
            footerParagraph1.AppendField("page number", Spire.Doc.FieldType.FieldPage);
            //totalPages = document.PageCount - 1;
            //footerParagraph1.AppendText(" of " + totalPages);


            document.SaveToFile("DocumentWithMargins.docx", FileFormat.Docx2013);
            document.Dispose();


            Document doc = new Document();

            doc.LoadFromFile("DocumentWithMargins.docx");
            string pathhh = Path.Combine(Directory.GetCurrentDirectory(), "DocumentWithMargins.docx");
            byte[] pdfBytes1 = System.IO.File.ReadAllBytes(pathhh);
            string pdfFilePath = "DocumentWithHeaderTable.pdf";
            doc.SaveToFile(pdfFilePath, FileFormat.PDF);
            byte[] pdfBytes = TemplatePreparation.ConvertDocxToPdfBytes(doc);
            //byte[] pdfBytes = geturl();
            doc.Dispose();
            bytes = pdfBytes;
            //PrintDocument();
            if (!p_isPdf)
                return pdfBytes1;
            else
                return bytes;

        }


        [HttpGet("getpdf2")]
        public ActionResult<byte[]> getpdf2(string templateinf, string p_user, int p_PrepId, bool p_isPdf = true)
        {
            byte[] bytes = null; DocumentPreparation preparation = new DocumentPreparation();
            DataSet dataset = DocumentTemplateConfigurationData.GetDocumentTemplateConfigurationByTemplate(templateinf, p_PrepId);
            DataSet ds_template = DocumentTemplateConfigurationData.GetTemplateHeaderFooterDetails(templateinf, p_PrepId);
            DocumentTemplateConfiguration template = DocumentTemplateConfigurationConverter.SetDocumentTemplateConfiguration(dataset);
            DocumentTemplateConfiguration template1 = DocumentTemplateConfigurationConverter.SetDocumentTemplateHeaderFooterConfiguration(ds_template);
            if (template1 != null)
            {
                DataSet dp_dataset = DocumentPreparationData.GetDocumentPreparationByDPNID(Convert.ToInt32(template1.DTID));
                preparation = DocumentPreparationConverter.SetDocumentPreparation(dp_dataset);
            }
            if (template != null && !string.IsNullOrEmpty(template.CloneTemp))
            {
                template = DocumentTemplateConfigurationConverter.SetDocumentTemplateCloneConfigurationt(dataset);
            }
            StringBuilder builder = new StringBuilder();
            builder.Append(htmlUpper);
            string path = Path.Combine(Directory.GetCurrentDirectory(), "license.elic.xml");
            Spire.Doc.License.LicenseProvider.SetLicenseKey("DQEAncpg8UKrpcZ6bd1acDUrk/DzuHpVVqZMUNaup1CKQyMW0ztEG9JSlYIAt/ms0m/szh02VvrZVOWjJ7Kzd4+wgan7Q3mFjE1cVdyrarldLqFv5SNBWtQPTHwyxbyQGweGCKYNGPJzYhM4sutNkPm+T0BpuFGjuYI4XhHjaAx3RzGbRwgzoFr5eVOZXE8z/fugnveQBjN6xxayvrCWvoAzXav0SHLdZSL6TiqpL0nbsEM9IcIxeB2+JRjdBzQ3JenJSuY2FIsrenGNHNQ50ebnoqw8FkYPQbyklyO7j3HtCzpEht1zGUdNEf94YC33hwVdrF9lzmVoSOToP2iOkysIZTRTlKQ5BTjU5qlmrQiki/1gjeU8FiFKB73VDq5kbXiOyY2ZzHutz+CjCqCM1lStKIMC/n4KumDsnoblURz84q2Fks9crbXDZsaEfZ+kMb1WAyIZj5NQ3ECYXzyvQ4l3U1vawJWLMbgifrlmqh1EDGL3XSspO4zVCtTtBrZubr9JLCwUenVDz6JUAU2au9Q8HD/oHOgJbwfoqK4InTvolSaA8elHHpS/vByUCIiBaU4RodGS5Db63ZNv+1r0NiF8ml1Sl91AYYEYuurGIIMO3fZzBdWwQKCLPgM4/L8b88+g/C55UTnBVOOGkd5BM9qx68isemi+9HR3gz8Jawj3ac766QsVVoizDtVrcEDXxCy4zExlplijmwFxcE6eM2nkLTvroL5uFCSA+6c5T4hRvC4cpcI2bUBtR4sDiznRV97Kwy1cPX9yRYupRlxtbdc33k08clY/D3o/VmmosKy0IVocjKTfMgnQxvyRf6v2TZAVCeUvl/bAleUNuJoc6oNbqTCR92i/7Lsq0bfvvq8MsG29KH2jpsTXafhkWSZpb3SLlB658DHloUc9iqRmjQmjSf55jIwUq1itvypXbeU0ytTgteqniZOn+D3W8jeVeKdftey933cTcFlFRF2+I/mGylL+X+ZrNL0aSkRjqXNCJ2B+8085l7W9VFlPfLot7IePqPpMxLju2keXeQAzC7kON/OYbRVJ6Ejr02mQ+1y4JjLq3cUiTfqMMNuYYqG5/aem05aYW6k2tj3HrwCNq23ssaraZYr6yx3UO7cD072H+rNxJjKsVmTvruvgD4dVu1wJUhE/xE8A5YEAMAvLU6aopXw2sdNnFiIYydTPTOFxEtXSdmIsGj0tYm6ccpXnskAVTToqqTsM3G3a5tmLlVCt/9tbgcas9LsFwTvELnV9yh6jP8Nm171VctFUv8GovAzjneetmbJniGEn3wsTnPJVHvE5j8MnM8vVK3ePYpmriWdCY3bWkdiT6VgPr+E51KqRftxBf67lrsYU+MEFit4+UfzAW3YFlbNU2MIA7mtcawNNfcyh5vmGjLPwsIPCqKCpzL5RWAkf1Qt0nMWQye8loyhD/TdHahinJNFHRY9hyqvM6BjxKWebq8/ShGxHtJFzLkP2U9EBLv/eK+mATc0M3pcdWC+sgKA9DHqTV0xm9KVqCCD6e8yvd654CMgnGJy0PFrGuXgBY6vERriKV55aHa64x5xJEd6iyXeU1PI=");
            Document document = new Spire.Doc.Document();
            Section section = document.AddSection();
            section.PageSetup.PageSize = PageSize.A4;
            section.PageSetup.Margins.All = 72f;


            //section.PageSetup.Margins.Top = 0f;

            //section.PageSetup.Margins.Bottom = 0f;


            HeaderFooter footer = section.HeadersFooters.Footer;
            Paragraph footerParagraph = footer.AddParagraph();
            StringBuilder footerbuilder = new StringBuilder();
            footerbuilder.Append(htmlUpper);
            footerbuilder.Append(TemplatePreparation.PrepareStaticdiv(template, template1, p_user));

            footerbuilder.Append(htmllower);
            footerParagraph.AppendHTML(footerbuilder.ToString());
            footerParagraph.Format.BeforeSpacing = 0;
            footerParagraph.Format.AfterSpacing = 0;
            footerParagraph.Format.PageBreakBefore = false;

            Paragraph paragraph = section.AddParagraph();
            var totalPages = document.PageCount - 1;

            for (int i = 0; i < totalPages; i++)
            {
                HeaderFooter header = section.HeadersFooters.Header;
                Paragraph headerParagraph = header.AddParagraph();
                StringBuilder headerbuilder = new StringBuilder();
                headerbuilder.Append(htmlUpper);
                if (template.documenttype.Equals("BATCH PACKING RECORD 08", StringComparison.InvariantCultureIgnoreCase))
                {
                    headerbuilder.Append(TemplatePreparation.PrepareBMRHeader(template, template1, i + 1, preparation));
                }
                else if (template.documenttype.Equals("BATCH PACKING RECORD", StringComparison.InvariantCultureIgnoreCase))
                {
                    headerbuilder.Append(TemplatePreparation.PrepareBMRHeader(template, template1, i + 1, preparation));
                }
                else if (template.documenttype.Equals("BATCH MANUFACTURING RECORD", StringComparison.InvariantCultureIgnoreCase))
                {
                    headerbuilder.Append(TemplatePreparation.PrepareBMRHeader(template, template1, i + 1, preparation));
                }
                else if (template.documenttype.Equals("STANDARD OPERATING PROCEDURE", StringComparison.InvariantCultureIgnoreCase))
                {
                    headerbuilder.Append(TemplatePreparation.PrepareHeaderStaticdiv(template, template1, i + 1, preparation, totalPages));
                }
                else if (template.documenttype.Equals("STANDARD TESTING PROCEDURE", StringComparison.InvariantCultureIgnoreCase))
                {
                    headerbuilder.Append(TemplatePreparation.PrepareSTPHeader(template, template1, i + 1, preparation));
                }
                else if (template.documenttype.Equals("STANDARD TESTING SPECIFICATION", StringComparison.InvariantCultureIgnoreCase))
                {
                    headerbuilder.Append(TemplatePreparation.PrepareSTPHeader(template, template1, i + 1, preparation));
                }
                else if (template.documenttype.Equals("Validation Protocol", StringComparison.InvariantCultureIgnoreCase))
                {
                    headerbuilder.Append(TemplatePreparation.PrepareSTPHeader(template, template1, i + 1, preparation));
                }
                else
                    headerbuilder.Append(TemplatePreparation.PrepareHeaderStaticdiv(template, template1, i + 1, preparation, totalPages));

                //headerbuilder.Append(TemplatePreparation.PrepareBMRHeader(template));
                //headerbuilder.Append(TemplatePreparation.PrepareSTPHeader(template));
                headerbuilder.Append(htmllower);
                headerParagraph.AppendHTML(headerbuilder.ToString());
                headerParagraph.Format.BeforeSpacing = 0;
                headerParagraph.Format.AfterSpacing = 0;
                headerParagraph.Format.PageBreakBefore = false;

                builder.Append(htmlUpper);
                builder.Append(template.Page[i].text);
                builder.Append(htmllower);
                builder.Append("<div style=\"page-break-before: always;\"></div>");
                //if (i < template.Pages - 1)
                //{
                //    section = document.AddSection();
                //    section.PageSetup.Margins.All = 72f;
                //}
            }
            paragraph.Format.BeforeSpacing = -10;

            paragraph.Format.AfterSpacing = 0;
            paragraph.AppendHTML(builder.ToString());
            document.SaveToFile("DocumentWithMargins.docx", FileFormat.Docx2013);
            document.Dispose();


            Document doc = new Document();


            doc.LoadFromFile("DocumentWithMargins.docx");
            string pathhh = Path.Combine(Directory.GetCurrentDirectory(), "DocumentWithMargins.docx");
            byte[] pdfBytes1 = System.IO.File.ReadAllBytes(pathhh);
            string pdfFilePath = "DocumentWithHeaderTable.pdf";
            doc.SaveToFile(pdfFilePath, FileFormat.PDF);
            byte[] pdfBytes = TemplatePreparation.ConvertDocxToPdfBytes(doc);
            //byte[] pdfBytes = geturl();
            doc.Dispose();
            bytes = pdfBytes;
            //PrintDocument();
            if (!p_isPdf)
                return pdfBytes1;
            else
                return bytes;

        }





    }
    public class TemplatePreparation
    {
        public static byte[] ConvertDocxToPdfBytes(Document document)

        {

            using (MemoryStream stream = new MemoryStream())

            {

                document.SaveToStream(stream, FileFormat.PDF);

                return stream.ToArray();

            }

        }

        public static string PrepareStaticdiv(DocumentTemplateConfiguration template, DocumentTemplateConfiguration template1, string p_user)
        {
            string table = string.Empty;
            StringBuilder htmlBuilder = new StringBuilder();
            //htmlBuilder.Append("<style>");
            //htmlBuilder.Append(".table-container { display: table; width: 100%; border-collapse: collapse; }");
            //htmlBuilder.Append(".table-row { display: table-row; }");
            //htmlBuilder.Append(".table-cell { display: table-cell; padding: 1px;}");
            //htmlBuilder.Append(".label-cell { text-align: left; font-weight: bold; width: 50px; }");
            //htmlBuilder.Append(".value-cell { text-align: center; width: 50px; }");
            //htmlBuilder.Append("</style>");
            //htmlBuilder.Append("<div class=\"table-container\">");kkkkkkkkkk

            // Append the style information
            htmlBuilder.AppendLine("<style type=\"text/css\">");
            htmlBuilder.AppendLine(".tg  {border-collapse:collapse;border-spacing:0;}");
            htmlBuilder.AppendLine(".tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:5px 5px;word-break:normal;}");
            htmlBuilder.AppendLine(".tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:5px 5px;word-break:normal;}");
            htmlBuilder.AppendLine(".tg .tg-0p91{border-color:inherit;font-family:\"Times New Roman\", Times, serif !important;text-align:center;vertical-align:top}");
            htmlBuilder.AppendLine(".tg .tg-53v8{border-color:inherit;font-family:\"Times New Roman\", Times, serif !important;text-align:left;vertical-align:top}");
            htmlBuilder.AppendLine(".tg .tg-iucd{border-color:inherit;font-family:\"Times New Roman\", Times, serif !important;text-align:left;vertical-align:top}");
            htmlBuilder.AppendLine(".tg .tg-adin{font-family:\"Times New Roman\", Times, serif !important;font-size:14px;text-align:left;vertical-align:top}");
            htmlBuilder.AppendLine(".tg .tg-adin1{font-family:\"Times New Roman\", Times, serif !important;font-size:14px;text-align:left;vertical-align:top}");
            htmlBuilder.AppendLine(".tg .tg-zv4m{border-color:#ffffff;text-align:left;vertical-align:top;font-family:\"Times New Roman\", Times, serif !important;font-size:14px;}");
            htmlBuilder.AppendLine(".p {border-color:inherit;font-family:\"Times New Roman\", Times, serif !important;text-align:left;vertical-align:top}");
            htmlBuilder.AppendLine("</style>");

            htmlBuilder.AppendLine("<table class=\"tg\">");
            htmlBuilder.AppendLine("<thead>");
            htmlBuilder.AppendLine("  <tr>");
            htmlBuilder.AppendLine("    <th class=\"tg-zd42\"></th>");
            htmlBuilder.AppendLine("    <th class=\"tg-adin\">Prepared By</th>");
            htmlBuilder.AppendLine("    <th class=\"tg-adin\">Checked By</th>");
            htmlBuilder.AppendLine("    <th class=\"tg-adin\">Approved By</th>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("</thead>");
            htmlBuilder.AppendLine("<tbody>");
            //htmlBuilder.AppendLine("  <tr>");
            //htmlBuilder.AppendLine("    <th class=\"tg-adin\">Signature</th>");
            //htmlBuilder.AppendLine("    <td class=\"tg-zd42\"></td>");
            //htmlBuilder.AppendLine("    <td class=\"tg-zd42\"></td>");
            //htmlBuilder.AppendLine("    <td class=\"tg-zd42\"></td>");
            //htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("  <tr>");
            htmlBuilder.AppendLine("    <th class=\"tg-adin\">Date</th>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.PreparedDates) ? template1.PreparedDates : "---") : "---")}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.ReviewDates) ? template1.ReviewDates : "---") : "---")}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.ApproveDates) ? template1.ApproveDates : "---") : "---")}</td>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("  <tr>");
            htmlBuilder.AppendLine("    <th class=\"tg-adin\">Name</th>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.PreparedBy) ? template1.PreparedBy : "---") : "---")}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.ReviewedBy) ? template1.ReviewedBy : "---") : "---")}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.ApprovedBy) ? template1.ApprovedBy : "---") : "---")}</td>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("  <tr>");
            htmlBuilder.AppendLine("    <th class=\"tg-adin\">Designation</th>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.PreparedRole) ? template1.PreparedRole : "---") : "---")}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.ReviewedRole) ? template1.ReviewedRole : "---") : "---")}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.ApprovedRole) ? template1.ApprovedRole : "---") : "---")}</td>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("  <tr>");
            htmlBuilder.AppendLine("    <th class=\"tg-adin\">Department</th>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.PrepareDept) ? template1.PrepareDept : "---") : "---")}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.ReviewedDept) ? template1.ReviewedDept : "---") : "---")}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-adin\">{(template1 != null ? (!string.IsNullOrEmpty(template1.ApprovedDept) ? template1.ApprovedDept : "---") : "---")}</td>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("</tbody>");
            htmlBuilder.AppendLine("</table>");

            htmlBuilder.AppendLine("<table class=\"tg\">");
            htmlBuilder.AppendLine("<thead>");
            htmlBuilder.AppendLine("  <tr>");
            //htmlBuilder.AppendLine($"    <td class=\"tg-zv4m\"><span style=\"font-weight:bold\">Format No : {template.FormatNo}</span><br><span style=\"font-weight:bold\" {!string.IsNullOrEmpty(template1.PrintCopy)}>Print Type: {template1.PrintCopy}, Printed By: {p_user}, Printed On: {DateTime.Now.ToShortDateString()} {DateTime.Now.ToShortTimeString()}</span><br><span style=\"font-weight:bold\" {!string.IsNullOrEmpty(template1.PrintCopy)} >Print Reason: {template1.PrintReason}</span></td>");
            htmlBuilder.AppendLine($"<td class=\"tg-zv4m\"><span style=\"font-weight:bold;font-size:9px\">Format No : {(template != null ? template.FormatNo : "")}</span><br>");
            #region date
            // Get the local time zone
            TimeZoneInfo localTimeZone = TimeZoneInfo.Local;

            // Get the time zone by its ID (for example, "Eastern Standard Time")
            TimeZoneInfo targetTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");

            // Get the current date and time
            DateTime currentTime = DateTime.Now;

            // Convert the current time to the target time zone
            DateTime targetTime = TimeZoneInfo.ConvertTime(currentTime, localTimeZone, targetTimeZone);
            //Console.WriteLine("Current Time (Target): " + targetTime.ToString("dd-MM-yyyy HH:mm:ss"));
            #endregion
            if (!string.IsNullOrEmpty(template1.PrintCopy))
            {
                htmlBuilder.AppendLine($"<span style=\"font-weight:bold;font-size:9px\">Print Type: {template1.PrintCopy}, Printed By: {p_user}, Printed On: {targetTime.ToString("dd-MM-yyyy HH:mm:ss")}</span><br>");
            }
            if (!string.IsNullOrEmpty(template1.PrintReason))
            {
                htmlBuilder.AppendLine($"<span style=\"font-weight:bold;font-size:9px\">Print Reason: {template1.PrintReason}</span>");
            }
            if (!string.IsNullOrEmpty(template1.PrintReason))
            {
                htmlBuilder.AppendLine($"<span style=\"font-weight:bold;font-size:9px\">, Print Count: {template1.PrintCount}</span>");
            }
            htmlBuilder.AppendLine("</td>");

            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("</thead>");
            htmlBuilder.AppendLine("</table>");

            //htmlBuilder.AppendLine($"<p>Print Type: {(template1 != null ? (!string.IsNullOrEmpty(template1.PrintCopy) ? template1.PrintCopy : "test") : "test")}</p>");
            table = htmlBuilder.ToString();
            return table;

        }

        public static string PrepareHeaderStaticdiv(DocumentTemplateConfiguration template, DocumentTemplateConfiguration template1, int p_PageNo, DocumentPreparation preparation, int totalPages)
        {
            string table = string.Empty;
            StringBuilder htmlBuilder = new StringBuilder();

            // Read the contents of the SVG file
            string currentDirectory = Directory.GetCurrentDirectory();
            string path = Path.Combine(currentDirectory, "Logo", template.header);
            string footerpath = Path.Combine(currentDirectory, "Logo", template.footer);
            string dataUri = string.Empty; string dataUri1 = string.Empty;
            string documentTypeNumber = string.Empty;
            switch (template.documenttype.ToUpper())
            {
                case "STANDARD TESTING SPECIFICATION":
                    documentTypeNumber = "STS No.";
                    break;
                case "STANDARD TESTING PROCEDURE":
                    documentTypeNumber = "STP No.";
                    break;
                case "STANDARD OPERATING PROCEDURE":
                    documentTypeNumber = "SOP No.";
                    break;
                case "BATCH PACKING RECORD":
                    documentTypeNumber = "BPR No.";
                    break;
                case "BATCH MANUFACTURING RECORD":
                    documentTypeNumber = "BMR No";
                    break;
                case "Validation Protocol":
                    documentTypeNumber = "STP No.";
                    break;
                default:
                    documentTypeNumber = "STP No.";
                    break;
            }
            if (System.IO.File.Exists(path))
            {
                string base64EncodedImage = Convert.ToBase64String(System.IO.File.ReadAllBytes(path));
                dataUri = $"data:image/jpeg;base64,{base64EncodedImage}";
            }
            if (System.IO.File.Exists(footerpath))
            {
                string base64EncodedImage = Convert.ToBase64String(System.IO.File.ReadAllBytes(footerpath));
                dataUri1 = $"data:image/jpeg;base64,{base64EncodedImage}";
            }
            // Append the style information
            htmlBuilder.AppendLine("<style type=\"text/css\">");
            htmlBuilder.AppendLine(".tg  {border-collapse:collapse;border-spacing:0;}");
            htmlBuilder.AppendLine(".tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:5px 5px;word-break:normal;}");
            htmlBuilder.AppendLine(".tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:5px 5px;word-break:normal;}");
            htmlBuilder.AppendLine(".tg .tg-0p91{border-color:inherit;font-family:\"Times New Roman\", Times, serif !important;font-size:14px;font-weight:bold;text-align:center;vertical-align:top}");
            htmlBuilder.AppendLine(".tg .tg-53v8{border-color:inherit;font-family:\"Times New Roman\", Times, serif !important;font-size:12px;font-weight:bold;text-align:left;vertical-align:top}");
            htmlBuilder.AppendLine(".tg .tg-iucd{border-color:inherit;font-family:\"Times New Roman\", Times, serif !important;font-size:12px;font-weight:bold;text-align:left;vertical-align:top}");
            htmlBuilder.AppendLine("</style>");

            // Append the table
            htmlBuilder.AppendLine("<table class=\"tg\">");
            htmlBuilder.AppendLine("<thead>");
            htmlBuilder.AppendLine("  <tr>");
            htmlBuilder.AppendLine($@"<th class=""tg-iucd""><img src=""{dataUri}"" width=""100"" height=""80"" /></th>");
            //htmlBuilder.AppendLine($@"<th class=""tg-iucd""><img src=""{dataUri}"" width=""20"" height=""20"" /></th>");
            //htmlBuilder.AppendLine($@"<img src=""{dataUri}"" width=""20"" height=""20"" />");
            htmlBuilder.AppendLine($"    <th class=\"tg-0p91\" colspan=\"2\">{(template1 != null ? (!string.IsNullOrEmpty(template.titleTable[0][0].inputValue) ? template.titleTable[0][0].inputValue.Replace("\n", "<br>") : "---") : "---")}</th>");
            htmlBuilder.AppendLine($@"<th class=""tg-iucd""><img src=""{dataUri1}"" width=""100"" height=""80"" style=""align:center"" /></th>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("</thead>");
            htmlBuilder.AppendLine("<tbody>");
            htmlBuilder.AppendLine("  <tr>");
            //htmlBuilder.AppendLine("    <td class=\"tg-iucd\" colspan=\"2\">Title: Preparation, checking, approval, control, distribution, <br>revision, retrieval &amp; destruction of standard operating procedure</td>");
            //htmlBuilder.AppendLine($"   <td class=\"ttg-iucd\" colspan=\"t2\"t><span style=\"tfont-weight:bold\"t>Title:</span> {template1.DocumentTitle}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-iucd\" colspan=\"2\"><span style=\"font-weight:bold\">Title:</span> {(template1 != null ? (!string.IsNullOrEmpty(template1.DocumentTitle) ? template1.DocumentTitle : "---") : "---")}</td>");
            htmlBuilder.AppendLine($"<td class=\"tg-iucd\">{(documentTypeNumber)}</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{(template1 != null ? (!string.IsNullOrEmpty(template1.DocumentNo) ? template1.DocumentNo : "---") : "---")}</td>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("  <tr>");
            htmlBuilder.AppendLine("    <td class=\"tg-53v8\">Revision No.</td>");
            if (preparation?.Prepdocument != null && !string.IsNullOrEmpty(preparation?.Prepdocument?.revisionNo))
                htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{(preparation != null ? (!string.IsNullOrEmpty(preparation?.Prepdocument?.revisionNo) ? preparation.Prepdocument.revisionNo : "---") : "---")}</td>");
            else
                htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{(template1 != null ? (!string.IsNullOrEmpty(template1.Version.ToString()) ? template1.Version : "---") : "---")}</td>");

            htmlBuilder.AppendLine("    <td class=\"tg-53v8\">Supersedes</td>");
            var supersedesNo = string.Empty;
            if (preparation?.Prepdocument != null && !string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo))
                supersedesNo = !string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo) ? Convert.ToString(preparation?.Prepdocument?.supersedesNo) : "0";
            else
                supersedesNo = (template1 != null ? (!string.IsNullOrEmpty(template1.Supersedes.ToString()) ? Convert.ToString(template1.Supersedes) : "0") : "0");

            //if (preparation?.Prepdocument != null && !string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo))
            htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{supersedesNo}</td>");
            //else
            //    htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{(template1 != null ? (!string.IsNullOrEmpty(template1.Supersedes.ToString()) ? template1.Supersedes : 0) : 0)}</td>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("  <tr>");
            htmlBuilder.AppendLine("    <td class=\"tg-53v8\">Department</td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{(template1 != null ? (!string.IsNullOrEmpty(template1.Department) ? template1.Department : "---") : "---")}</td>");
            htmlBuilder.AppendLine("    <td class=\"tg-53v8\">Effective Date</td>");
            if (template1 != null && !string.IsNullOrEmpty(template1.EffectiveDate))
            {
                string formatteddate = Convert.ToDateTime(template1.EffectiveDate).ToString("dd-MM-yyyy").Replace('-', '/');
                htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{formatteddate}</td>");
            }
            else
                htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">---</td>");
            //htmlBuilder.AppendLine("    <td class=\"tg-53v8\">Page No.</td>");
            //htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{p_PageNo} of {totalPages}</td>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("  <tr>");
            //htmlBuilder.AppendLine("    <td class=\"tg-53v8\">Effective Date</td>");
            //htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{(template1 != null ? (!string.IsNullOrEmpty(template1.EffectiveDate) ? template1.EffectiveDate : "test") : "test")}</td>");
            htmlBuilder.AppendLine("    <td class=\"tg-53v8\">Review Date</td>");
            if (template1 != null && !string.IsNullOrEmpty(template1.ReviewDate))
            {
                string formatteddate = Convert.ToDateTime(template1.ReviewDate).ToString("dd-MM-yyyy").Replace('-', '/');
                htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">{formatteddate}</td>");
            }
            else
                htmlBuilder.AppendLine($"    <td class=\"tg-iucd\">---</td>");
            htmlBuilder.AppendLine("    <td class=\"tg-53v8\"></td>");
            htmlBuilder.AppendLine($"    <td class=\"tg-iucd\"></td>");
            htmlBuilder.AppendLine("  </tr>");
            htmlBuilder.AppendLine("</tbody>");
            htmlBuilder.AppendLine("</table>");
            table = htmlBuilder.ToString();
            return table;

        }
        public static string PrepareShortHeader(DocumentTemplateConfiguration template, DocumentTemplateConfiguration template1, int p_PageNo, DocumentPreparation preparation, int totalPages, string p_user)
        {
            string table = string.Empty;
            StringBuilder sb = new StringBuilder();

            // Read the contents of the SVG file
            string currentDirectory = Directory.GetCurrentDirectory();
            string path = Path.Combine(currentDirectory, "Logo", template.header);
            string footerpath = Path.Combine(currentDirectory, "Logo", template.footer);
            string dataUri = string.Empty; string dataUri1 = string.Empty;
            if (System.IO.File.Exists(path))
            {
                string base64EncodedImage = Convert.ToBase64String(System.IO.File.ReadAllBytes(path));
                dataUri = $"data:image/jpeg;base64,{base64EncodedImage}";
            }
            if (System.IO.File.Exists(footerpath))
            {
                string base64EncodedImage = Convert.ToBase64String(System.IO.File.ReadAllBytes(footerpath));
                dataUri1 = $"data:image/jpeg;base64,{base64EncodedImage}";
            }
            // Append the style information
            sb.AppendLine("<style type=\"text/css\">");
            sb.AppendLine(".tg  {border:none;border-collapse:collapse;border-spacing:0;}");
            sb.AppendLine(".tg td{border:none;border-width:0px;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;");
            sb.AppendLine("  padding:10px 5px;word-break:normal;}");
            sb.AppendLine(".tg th{border:none;border-width:0px;font-family:Arial, sans-serif;font-size:14px;font-weight:normal;");
            sb.AppendLine("  overflow:hidden;padding:10px 5px;word-break:normal;}");
            sb.AppendLine(".tg .tg-ag9c{border-color:#333333;font-family:\"Times New Roman\", Times, serif !important;font-size:14px;font-weight:bold;");
            sb.AppendLine("  text-align:center;vertical-align:middle}");
            sb.AppendLine(".tg .tg-6vv4{border-color:#333333;font-family:\"Times New Roman\", Times, serif !important;font-size:14px;font-weight:bold;");
            sb.AppendLine("  text-align:center;vertical-align:top}");
            sb.AppendLine(".tg .tg-ao2g{border-color:#333333;text-align:center;vertical-align:top}");
            sb.AppendLine(".tg .tg-de2y{border-color:#333333;text-align:left;vertical-align:top}");
            sb.AppendLine("</style>");

            // Append the table
            sb.AppendLine("<table class=\"tg\">");
            sb.AppendLine("<thead>");
            sb.AppendLine("  <tr>");
            sb.AppendLine($@"<th class=""tg-ao2g""><img src=""{dataUri}"" width=""100"" height=""80"" /></th>");
            sb.AppendLine($"    <th class=\"tg-6vv4\" >{(template1 != null ? (!string.IsNullOrEmpty(template.titleTable[0][0].inputValue) ? template.titleTable[0][0].inputValue.Replace("\n", "<br>") : "---") : "---")}</th>");
            //sb.AppendLine("    <th class=\"tg-6vv4\">Vlims Pvt Ltd.</th>");
            sb.AppendLine($@"<th class=""tg-de2y""><img src=""{dataUri1}"" width=""100"" height=""80"" style=""align:center"" /></th>");
            sb.AppendLine("  </tr>");
            sb.AppendLine("</thead>");
            sb.AppendLine("<tbody>");
            sb.AppendLine("  <tr>");
            sb.AppendLine($"    <td class=\"tg-ag9c\" colspan=\"3\">{template1.DocumentTitle}</td>");
            sb.AppendLine("  </tr>");
            sb.AppendLine("</tbody>");
            sb.AppendLine("</table>");

            table = sb.ToString();
            return table;

        }       
        public static string PrepareSTPHeader(DocumentTemplateConfiguration template, DocumentTemplateConfiguration template1, int p_PageNo, DocumentPreparation preparation)
        {
            StringBuilder stringBuilder = new StringBuilder();

            // Read the contents of the SVG file
            string currentDirectory = Directory.GetCurrentDirectory();
            string path = Path.Combine(currentDirectory, "Logo", template.header);
            string footerpath = Path.Combine(currentDirectory, "Logo", template.footer);
            string dataUri = string.Empty; string dataUri1 = string.Empty;
            string documentTypeNumber = string.Empty;
            switch (template.documenttype.ToUpper())
            {
                case "STANDARD TESTING SPECIFICATION":
                    documentTypeNumber = "STS No.";
                    break;
                case "STANDARD TESTING PROCEDURE":
                    documentTypeNumber = "STP No.";
                    break;
                case "STANDARD OPERATING PROCEDURE":
                    documentTypeNumber = "SOP No.";
                    break;
                case "BATCH PACKING RECORD":
                    documentTypeNumber = "BPR No.";
                    break;
                case "BATCH MANUFACTURING RECORD":
                    documentTypeNumber = "BMR No";
                    break;
                case "Validation Protocol":
                    documentTypeNumber = "STP No.";
                    break;
                default:
                    documentTypeNumber = "STP No.";
                    break;
            }
            if (System.IO.File.Exists(path))
            {
                string base64EncodedImage = Convert.ToBase64String(System.IO.File.ReadAllBytes(path));
                dataUri = $"data:image/jpeg;base64,{base64EncodedImage}";
            }
            if (System.IO.File.Exists(footerpath))
            {
                string base64EncodedImage = Convert.ToBase64String(System.IO.File.ReadAllBytes(footerpath));
                dataUri1 = $"data:image/jpeg;base64,{base64EncodedImage}";
            }

            stringBuilder.AppendLine("<style type=\"text/css\">");
            stringBuilder.AppendLine(".tg  {border-collapse:collapse;border-spacing:0;}");
            stringBuilder.AppendLine(".tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:5px 5px;word-break:normal;}");
            stringBuilder.AppendLine(".tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:5px 5px;word-break:normal;}");
            stringBuilder.AppendLine(".tg .tg-1wig{font-family:\"Times New Roman\", Times, serif !important;font-size:12px;font-weight:bold;text-align:left;vertical-align:top}");
            stringBuilder.AppendLine(".tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}");
            stringBuilder.AppendLine(".tg .tg-7btt{font-family:\"Times New Roman\", Times, serif !important;border-color:inherit;font-size:14px;font-weight:bold;text-align:center;vertical-align:top}");
            stringBuilder.AppendLine(".tg .tg-fymr{font-family:\"Times New Roman\", Times, serif !important;border-color:inherit;font-size:12px;font-weight:bold;text-align:left;vertical-align:top}");
            stringBuilder.AppendLine(".tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}");
            stringBuilder.AppendLine(".tg .tg-0lax{text-align:left;vertical-align:top}");
            stringBuilder.AppendLine("</style>");

            stringBuilder.AppendLine(@"<table class=""tg"">");
            stringBuilder.AppendLine(@"<thead>");
            stringBuilder.AppendLine(@"<tr>");
            //stringBuilder.AppendLine(@"<th class=""tg-c3ow""><img src=""data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3e%3cpath fill='%23000000' d='M350.85 129c25.97 4.67 47.27 18.67 63.92 42 14.65 20.67 24.64 46.67 29.96 78 4.67 28.67 4.32 57.33-1 86-7.99 47.33-23.97 87-47.94 119-28.64 38.67-64.59 58-107.87 58-10.66 0-22.3-3.33-34.96-10-8.66-5.33-18.31-8-28.97-8s-20.3 2.67-28.97 8c-12.66 6.67-24.3 10-34.96 10-43.28 0-79.23-19.33-107.87-58-23.97-32-39.95-71.67-47.94-119-5.32-28.67-5.67-57.33-1-86 5.32-31.33 15.31-57.33 29.96-78 16.65-23.33 37.95-37.33 63.92-42 15.98-2.67 37.95-.33 65.92 7 23.97 6.67 44.28 14.67 60.93 24 16.65-9.33 36.96-17.33 60.93-24 27.98-7.33 49.96-9.67 65.94-7zm-54.94-41c-9.32 8.67-21.65 15-36.96 19-10.66 3.33-22.3 5-34.96 5l-14.98-1c-1.33-9.33-1.33-20 0-32 2.67-24 10.32-42.33 22.97-55 9.32-8.67 21.65-15 36.96-19 10.66-3.33 22.3-5 34.96-5l14.98 1 1 15c0 12.67-1.67 24.33-4.99 35-3.99 15.33-10.31 27.67-18.98 37z'/%3e%3c/svg%3e"" width=""80"" height=""80""></th>");
            //stringBuilder.AppendLine(@"<td class=""tg-0pky""><img src=""https://images.app.goo.gl/v534Zi6U8F7y9KxQA"" width=""140"" height=""80""></td>");
            stringBuilder.AppendLine($@"<th class=""tg-0pky""><img src=""{dataUri}"" width=""140"" height=""80"" /></th>");
            stringBuilder.AppendLine($"    <th class=\"tg-7btt\" colspan=\"2\">{(template1 != null ? (!string.IsNullOrEmpty(template.titleTable[0][0].inputValue) ? template.titleTable[0][0].inputValue.Replace("\n", "<br>") : "---") : "---")}</th>");
            stringBuilder.AppendLine($@"<th class=""tg-0pky""><img src=""{dataUri1}"" width=""100"" height=""80"" style=""align:center"" /></th>");

            //stringBuilder.AppendLine(@"<th class=""tg-7btt"" colspan=""3"">ACCENT PHARMACEUTICALS &amp; DIAGNOSTICS<br>FOREST ROAD SALON, H.P. (INDIA)<br>QUALITY CONTROL DEPARTMENT<br>STANDARD TESTING PROCEDURE</th>");

            stringBuilder.AppendLine(@"</tr>");
            stringBuilder.AppendLine(@"</thead>");
            stringBuilder.AppendLine(@"<tbody>");
            stringBuilder.AppendLine(@"<tr>");
            stringBuilder.AppendLine(@"<td class=""tg-fymr"">Generic Name</td>");
            stringBuilder.AppendLine($"    <td class=\"tg-1wig\" colspan=\"3\"><span style=\"font-weight:bold\"></span> {(template1 != null ? (!string.IsNullOrEmpty(template1.DocumentTitle) ? template1.DocumentTitle : "test") : "test")}</td>");
            //stringBuilder.AppendLine(@"<td class=""tg-0pky"" colspan=""3"">{(template1 != null ? (!string.IsNullOrEmpty(template1.DocumentTitle) ? template1.DocumentTitle : ""test"") : ""test"")}</td>");
            stringBuilder.AppendLine(@"</tr>");

            stringBuilder.AppendLine(@"<tr>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(documentTypeNumber)}</td>");
            //stringBuilder.AppendLine(@"<td class=""tg-0pky"">STP NO. 1234</td>");
            stringBuilder.AppendLine($"    <td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.DocumentNo) ? template1.DocumentNo : "---") : "---")}</td>");
            stringBuilder.AppendLine(@"<td class=""tg-1wig"">Revision No.</td>");
            if (preparation?.Prepdocument != null && !string.IsNullOrEmpty(preparation?.Prepdocument?.revisionNo))
                stringBuilder.AppendLine($"    <td class=\"tg-1wig\">{(preparation != null ? (!string.IsNullOrEmpty(preparation?.Prepdocument?.revisionNo) ? preparation.Prepdocument.revisionNo : "---") : "---")}</td>");
            else
                stringBuilder.AppendLine($"    <td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.Version.ToString()) ? template1.Version : "---") : "---")}</td>");
            //stringBuilder.AppendLine(@"<td class=""tg-0pky"">01</td>");
            stringBuilder.AppendLine(@"</tr>");

            stringBuilder.AppendLine(@"<tr>");
            stringBuilder.AppendLine(@"<td class=""tg-1wig"">Supersedes No.</td>");
            //stringBuilder.AppendLine(@"<td class=""tg-0pky"">00</td>");
            var supersedesNo = string.Empty;
            if (preparation?.Prepdocument != null && !string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo))
                supersedesNo = !string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo) ? Convert.ToString(preparation?.Prepdocument?.supersedesNo) : "0";
            else
                supersedesNo = (template1 != null ? (!string.IsNullOrEmpty(template1.Supersedes.ToString()) ? Convert.ToString(template1.Supersedes) : "0") : "0");

            stringBuilder.AppendLine($"    <td class=\"tg-1wig\">{supersedesNo}</td>");

            //if (preparation?.Prepdocument != null && !string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo))
            //    stringBuilder.AppendLine($"    <td class=\"tg-1wig\">{(preparation != null ? (!string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo) ? preparation.Prepdocument.supersedesNo : 0) : 0)}</td>");
            //else
            //    stringBuilder.AppendLine($"    <td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.Supersedes.ToString()) ? template1.Supersedes : 0) : 0)}</td>");

            stringBuilder.AppendLine(@"<td class=""tg-fymr"">Product/Material Code</td>");
            //stringBuilder.AppendLine(@"<td class=""tg-0pky"">001CODEMODE</td>");
            stringBuilder.AppendLine($"    <td class=\"tg-fymr\">{(preparation != null ? (!string.IsNullOrEmpty(preparation?.Prepdocument?.productCode) ? preparation.Prepdocument.productCode : "---") : "---")}</td>");
            stringBuilder.AppendLine(@"</tr>");
            stringBuilder.AppendLine(@"<tr>");
            stringBuilder.AppendLine(@"<td class=""tg-1wig"">Reference</td>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(preparation != null ? (!string.IsNullOrEmpty(preparation?.Prepdocument?.reference) ? preparation.Prepdocument.reference : "---") : "---")}</td>");
            stringBuilder.AppendLine(@"<td class=""tg-1wig"">Sample Quality</td>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(preparation != null ? (!string.IsNullOrEmpty(preparation.Prepdocument?.sampleQuantity) ? preparation.Prepdocument?.sampleQuantity.ToString() : "---") : "---")}</td>");
            stringBuilder.AppendLine(@"</tr>");
            stringBuilder.AppendLine(@"<tr>");
            stringBuilder.AppendLine(@"<td class=""tg-1wig"">Effective Date</td>");
            if (template1 != null && !string.IsNullOrEmpty(template1.EffectiveDate))
            {
                string formatteddate = Convert.ToDateTime(template1.EffectiveDate).ToString("dd-MM-yyyy").Replace('-', '/');
                stringBuilder.AppendLine($"<td class=\"tg-1wig\">{formatteddate}</td>");
            }
            else
                stringBuilder.AppendLine($"<td class=\"tg-1wig\">---</td>");
            //stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.EffectiveDate) ? template1.EffectiveDate : "test") : "test")}</td>");
            stringBuilder.AppendLine(@"<td class=""tg-1wig"">Review Date</td>");
            if (template1 != null && !string.IsNullOrEmpty(template1.ReviewDate))
            {
                string formatteddate = Convert.ToDateTime(template1.ReviewDate).ToString("dd-MM-yyyy").Replace('-', '/');
                stringBuilder.AppendLine($"<td class=\"tg-1wig\">{formatteddate}</td>");
            }
            else
                stringBuilder.AppendLine($"<td class=\"tg-1wig\">---</td>");
            //stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.ReviewDate) ? template1.ReviewDate : "test") : "test")}</td>");
            stringBuilder.AppendLine(@"</tr>");
            stringBuilder.AppendLine(@"<tr>");
            stringBuilder.AppendLine(@"<td class=""tg-1wig"">Packing Information</td>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\" colspan=\"3\">{(preparation != null ? (!string.IsNullOrEmpty(preparation.Prepdocument?.packingInformation) ? preparation.Prepdocument?.packingInformation.ToString() : "---") : "---")}</td>");
            stringBuilder.AppendLine(@"</tr>");
            stringBuilder.AppendLine(@"<tr>");
            stringBuilder.AppendLine(@"<td class=""tg-1wig"">Label Claim</td>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\" colspan=\"3\">{(preparation != null ? (!string.IsNullOrEmpty(preparation.Prepdocument?.labelClaim) ? preparation.Prepdocument?.labelClaim.ToString() : "---") : "---")}</td>");
            stringBuilder.AppendLine(@"</tr>");
            stringBuilder.AppendLine(@"</tbody>");
            stringBuilder.AppendLine(@"</table>");

            string htmlTableString = stringBuilder.ToString();

            return htmlTableString;

        }

        public static string PrepareBMRHeader(DocumentTemplateConfiguration template, DocumentTemplateConfiguration template1, int p_PageNo, DocumentPreparation preparation)
        {
            StringBuilder stringBuilder = new StringBuilder();

            // Read the contents of the SVG file
            string currentDirectory = Directory.GetCurrentDirectory();
            string path = Path.Combine(currentDirectory, "Logo", template.header);
            string footerpath = Path.Combine(currentDirectory, "Logo", template.footer);
            string dataUri = string.Empty; string dataUri1 = string.Empty;
            string documentTypeNumber = string.Empty;
            switch (template.documenttype.ToUpper())
            {
                case "STANDARD TESTING SPECIFICATION":
                    documentTypeNumber = "STS No.";
                    break;
                case "STANDARD TESTING PROCEDURE":
                    documentTypeNumber = "STP No.";
                    break;
                case "STANDARD OPERATING PROCEDURE":
                    documentTypeNumber = "SOP No.";
                    break;
                case "BATCH PACKING RECORD":
                    documentTypeNumber = "BPR No.";
                    break;
                case "BATCH MANUFACTURING RECORD":
                    documentTypeNumber = "BMR No";
                    break;
                case "Validation Protocol":
                    documentTypeNumber = "STP No.";
                    break;
                default:
                    documentTypeNumber = "STP No.";
                    break;
            }
            if (System.IO.File.Exists(path))
            {
                string base64EncodedImage = Convert.ToBase64String(System.IO.File.ReadAllBytes(path));
                dataUri = $"data:image/jpeg;base64,{base64EncodedImage}";
            }
            if (System.IO.File.Exists(footerpath))
            {
                string base64EncodedImage = Convert.ToBase64String(System.IO.File.ReadAllBytes(footerpath));
                dataUri1 = $"data:image/jpeg;base64,{base64EncodedImage}";
            }

            stringBuilder.AppendLine("<style type=\"text/css\">");
            stringBuilder.AppendLine(".tg  {border-collapse:collapse;border-spacing:0;}");
            stringBuilder.AppendLine(".tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:5px 5px;word-break:normal;}");
            stringBuilder.AppendLine(".tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:5px 5px;word-break:normal;}");
            stringBuilder.AppendLine(".tg .tg-1wig{font-family:\"Times New Roman\", Times, serif !important;font-size:12px;font-weight:bold;text-align:left;vertical-align:top}");
            stringBuilder.AppendLine(".tg .tg-0p91{border-color:inherit;font-family:\"Times New Roman\", Times, serif !important;font-size:14px;font-weight:bold;text-align:center;vertical-align:top}");
            stringBuilder.AppendLine(".tg .tg-0lax{text-align:left;vertical-align:top}");
            stringBuilder.AppendLine(".tg .tg-amwm{font-weight:bold;text-align:center;vertical-align:top}");
            stringBuilder.AppendLine("</style>");

            stringBuilder.AppendLine("<table class=\"tg\">");
            stringBuilder.AppendLine("<thead>");
            stringBuilder.AppendLine("<tr>");
            //stringBuilder.AppendLine("<th class=\"tg-0lax\"><img src=\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3e%3cpath fill='%23000000' d='M350.85 129c25.97 4.67 47.27 18.67 63.92 42 14.65 20.67 24.64 46.67 29.96 78 4.67 28.67 4.32 57.33-1 86-7.99 47.33-23.97 87-47.94 119-28.64 38.67-64.59 58-107.87 58-10.66 0-22.3-3.33-34.96-10-8.66-5.33-18.31-8-28.97-8s-20.3 2.67-28.97 8c-12.66 6.67-24.3 10-34.96 10-43.28 0-79.23-19.33-107.87-58-23.97-32-39.95-71.67-47.94-119-5.32-28.67-5.67-57.33-1-86 5.32-31.33 15.31-57.33 29.96-78 16.65-23.33 37.95-37.33 63.92-42 15.98-2.67 37.95-.33 65.92 7 23.97 6.67 44.28 14.67 60.93 24 16.65-9.33 36.96-17.33 60.93-24 27.98-7.33 49.96-9.67 65.94-7zm-54.94-41c-9.32 8.67-21.65 15-36.96 19-10.66 3.33-22.3 5-34.96 5l-14.98-1c-1.33-9.33-1.33-20 0-32 2.67-24 10.32-42.33 22.97-55 9.32-8.67 21.65-15 36.96-19 10.66-3.33 22.3-5 34.96-5l14.98 1 1 15c0 12.67-1.67 24.33-4.99 35-3.99 15.33-10.31 27.67-18.98 37z'/%3e%3c/svg%3e\" width=\"80\" height=\"80\"></th>");
            //stringBuilder.AppendLine("<td class=\"tg-0lax\"><img src=\"https://images.app.goo.gl/v534Zi6U8F7y9KxQA\" width=\"140\" height=\"80\"></td>");
            //stringBuilder.AppendLine("<th class=\"tg-amwm\" colspan=\"3\">ACCENT PHARMACEUTICALS &amp; DIAGNOSTICS<br>FOREST ROAD, SOLAN, H.P. (INDIA)<br>BATCH MANUFACTURING RECORD</th>");
            stringBuilder.AppendLine($@"<th class=""tg-0lax""><img src=""{dataUri}"" width=""140"" height=""80"" /></th>");
            stringBuilder.AppendLine($"    <th class=\"tg-0p91\" colspan=\"2\">{(template1 != null ? (!string.IsNullOrEmpty(template.titleTable[0][0].inputValue) ? template.titleTable[0][0].inputValue.Replace("\n", "<br>") : "---") : "---")}</th>");
            stringBuilder.AppendLine($@"<th class=""tg-0lax""><img src=""{dataUri1}"" width=""100"" height=""80"" style=""align:center"" /></th>");
            stringBuilder.AppendLine("</tr>");
            stringBuilder.AppendLine("</thead>");
            stringBuilder.AppendLine("<tbody>");
            stringBuilder.AppendLine("<tr>");
            stringBuilder.AppendLine("<td class=\"tg-1wig\">PRODUCT NAME</td>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\" colspan=\"3\">{(template1 != null ? (!string.IsNullOrEmpty(template1.DocumentTitle) ? template1.DocumentTitle : "---") : "---")}</td>");
            stringBuilder.AppendLine("</tr>");
            stringBuilder.AppendLine("<tr>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(documentTypeNumber)}</td>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.DocumentNo) ? template1.DocumentNo : "---") : "---")}</td>");
            stringBuilder.AppendLine("<td class=\"tg-1wig\">REVISION NO.</td>");
            if (preparation?.Prepdocument != null && !string.IsNullOrEmpty(preparation?.Prepdocument?.revisionNo))
                stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(preparation != null ? (!string.IsNullOrEmpty(preparation?.Prepdocument?.revisionNo) ? preparation.Prepdocument.revisionNo : "---") : "---")}</td>");
            else
                stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.Version.ToString()) ? template1.Version : "---") : "---")}</td>");
            stringBuilder.AppendLine("</tr>");
            stringBuilder.AppendLine("<tr>");
            stringBuilder.AppendLine("<td class=\"tg-1wig\">BMR SUPERSEDES NO.</td>");
            var supersedesNo = string.Empty;
            if (preparation?.Prepdocument != null && !string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo))
                supersedesNo = !string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo) ? Convert.ToString(preparation?.Prepdocument?.supersedesNo) : "0";
            else
                supersedesNo = (template1 != null ? (!string.IsNullOrEmpty(template1.Supersedes.ToString()) ? Convert.ToString(template1.Supersedes) : "0") : "0");

            stringBuilder.AppendLine($"    <td class=\"tg-1wig\">{supersedesNo}</td>");
            //if (preparation?.Prepdocument != null && !string.IsNullOrEmpty(preparation.Prepdocument?.supersedesNo))
            //    stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(preparation != null ? (!string.IsNullOrEmpty(preparation?.Prepdocument?.supersedesNo) ? preparation.Prepdocument.supersedesNo : "test") : "test")}</td>");
            //else
            //    stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.Supersedes.ToString()) ? template1.Supersedes : "test") : "test")}</td>");
            stringBuilder.AppendLine("<td class=\"tg-1wig\">EFFECTIVE DATE</td>");
            if (template1 != null && !string.IsNullOrEmpty(template1.EffectiveDate))
            {
                string formatteddate = Convert.ToDateTime(template1.EffectiveDate).ToString("dd-MM-yyyy").Replace('-', '/');
                stringBuilder.AppendLine($"<td class=\"tg-1wig\">{formatteddate}</td>");
            }
            else
                stringBuilder.AppendLine($"<td class=\"tg-1wig\">---</td>");
            stringBuilder.AppendLine("</tr>");
            stringBuilder.AppendLine("<tr>");
            stringBuilder.AppendLine("<td class=\"tg-1wig\">BATCH NO.</td>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.BatchNumber) ? template1.BatchNumber : "---") : "---")}</td>");
            stringBuilder.AppendLine("<td class=\"tg-1wig\">BATCH SIZE</td>");
            stringBuilder.AppendLine($"<td class=\"tg-1wig\">{(template1 != null ? (!string.IsNullOrEmpty(template1.BatchSize) ? template1.BatchSize : "---") : "---")}</td>");
            stringBuilder.AppendLine("</tr>");
            stringBuilder.AppendLine("</tbody>");
            stringBuilder.AppendLine("</table>");

            //string htmlTableString = stringBuilder.ToString();


            string result = stringBuilder.ToString();

            return result;
        }
        public static string getformatteddate(string p_date)
        {
            DateTime date = DateTime.ParseExact(p_date, "MM/dd/yyyy", System.Globalization.CultureInfo.InvariantCulture);
            // Format the DateTime object to the desired formatt
            string formattedDate = date.ToString("dd/MM/yyyy");
            return formattedDate;
        }
        public static string PrepareHeaderdiv(DocumentTemplateConfiguration Template)
        {
            string table = string.Empty;
            StringBuilder tableHtml = new StringBuilder();
            // Add CSS styles
            tableHtml.Append("<style>");
            tableHtml.Append(".table-container { display: table; width: 100%; border-collapse: collapse; }");
            tableHtml.Append(".table-row { display: table-row; }");
            tableHtml.Append(".table-cell { display: table-cell; padding: 1px;}");
            tableHtml.Append(".label-cell { text-align: left; font-weight: bold; width: 50px; }");
            tableHtml.Append(".value-cell { text-align: center; width: 50px; }");
            tableHtml.Append("</style>");
            tableHtml.Append("<div class=\"table-container\">");

            foreach (List<HeaderTable> row in Template.headerTable)
            {
                tableHtml.Append("<div class=\"table-row\">");

                foreach (HeaderTable item in row)
                {
                    tableHtml.Append("<div class=\"table-cell ");

                    if (item.selectedOption == 1)
                    {
                        tableHtml.Append("label-cell");
                    }
                    else
                    {
                        tableHtml.Append("value-cell");
                    }

                    tableHtml.Append("\">");
                    if (item.selectedOption == 1)
                    {

                        tableHtml.Append(item.inputValue);
                    }
                    else
                        tableHtml.Append(item.inputValue);
                    tableHtml.Append("</div>");
                }

                tableHtml.Append("</div>");

            }
            tableHtml.Append("</div>");
            table = tableHtml.ToString();
            return table;

        }

        public static string PrepareFooterdiv(DocumentTemplateConfiguration Template)
        {
            string table = string.Empty;
            StringBuilder tableHtml = new StringBuilder();
            // Add CSS styles
            tableHtml.Append("<style>");
            tableHtml.Append(".table-container { display: table; width: 100%; border-collapse: collapse; }");
            tableHtml.Append(".table-row { display: table-row; }");
            tableHtml.Append(".table-cell { display: table-cell; padding: 1px;}");
            tableHtml.Append(".label-cell { text-align: left; font-weight: bold; width: 50px; }");
            tableHtml.Append(".value-cell { text-align: center; width: 50px; }");
            tableHtml.Append("</style>");
            tableHtml.Append("<div class=\"table-container\">");

            foreach (List<FooterTable> row in Template.footerTable)
            {
                tableHtml.Append("<div class=\"table-row\">");

                foreach (FooterTable item in row)
                {


                    tableHtml.Append("<div class=\"table-cell ");

                    if (item.selectedOption == 1)
                    {
                        tableHtml.Append("label-cell");
                    }
                    else
                    {
                        tableHtml.Append("value-cell");
                    }

                    tableHtml.Append("\">");
                    if (item.selectedOption == 1)
                    {
                        //if (!string.IsNullOrEmpty(item.inputValue))
                        //    tableHtml.Append(item.inputValue + " " + ":");
                        //else
                        tableHtml.Append(item.inputValue);
                    }
                    else
                        tableHtml.Append(item.inputValue);
                    tableHtml.Append("</div>");

                    //IsLabel = !IsLabel; // Toggle between label and value for each cell
                }

                tableHtml.Append("</div>");

            }
            tableHtml.Append("</div>");
            table = tableHtml.ToString();
            return table;

        }
        public byte[] geturl()
        {
            byte[] bytes = null;
            string docxFilePath = Path.Combine(Directory.GetCurrentDirectory(), "DocumentWithMargins.docx");
            string pdfFilePath = Path.Combine(Directory.GetCurrentDirectory(), "DocumentWithHeaderTable.pdf");

            // Create a new PDF document
            iTextSharp.text.Document pdfDoc = new iTextSharp.text.Document();

            // Create a new PDF writer
            PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(pdfFilePath, FileMode.Create));

            // Open the PDF document for writing
            pdfDoc.Open();

            // Open the DOCX file using Open XML SDK
            using (WordprocessingDocument doc = WordprocessingDocument.Open(docxFilePath, false))
            {
                DocumentFormat.OpenXml.Wordprocessing.Body body = doc.MainDocumentPart.Document.Body;

                // Iterate through paragraphs and tables in the DOCX and add them to the PDF
                foreach (var element in body.Elements())
                {
                    if (element is DocumentFormat.OpenXml.Wordprocessing.Paragraph para)
                    {
                        // Create a new paragraph in the PDF
                        pdfDoc.Add(new iTextSharp.text.Paragraph(para.InnerText));
                    }
                    else if (element is DocumentFormat.OpenXml.Wordprocessing.Table table)
                    {
                        // Process tables
                        PdfPTable pdfTable = new PdfPTable(table.Elements<DocumentFormat.OpenXml.Wordprocessing.TableRow>().First().Elements<DocumentFormat.OpenXml.Wordprocessing.TableCell>().Count());
                        foreach (var row in table.Elements<DocumentFormat.OpenXml.Wordprocessing.TableRow>())
                        {
                            foreach (var cell in row.Elements<DocumentFormat.OpenXml.Wordprocessing.TableCell>())
                            {
                                pdfTable.AddCell(cell.InnerText);
                            }
                        }
                        pdfDoc.Add(pdfTable);
                    }
                }
            }

            // Close the PDF document
            pdfDoc.Close();

            string path = Path.Combine(Directory.GetCurrentDirectory(), "DocumentWithHeaderTable.pdf");
            bytes = System.IO.File.ReadAllBytes(path);
            return bytes;
        }

        public static string PrepareshortheaderFooterdiv(DocumentTemplateConfiguration template, DocumentTemplateConfiguration template1, string p_user)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("<style type=\"text/css\">");
            sb.AppendLine(".tg  {border-collapse:collapse;border-spacing:0;}");
            sb.AppendLine(".tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;");
            sb.AppendLine("  overflow:hidden;padding:10px 5px;word-break:normal;}");
            sb.AppendLine(".tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;");
            sb.AppendLine("  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}");
            sb.AppendLine(".tg .tg-hqd7{border-color:#ffffff;font-family:\"Times New Roman\", Times, serif !important;text-align:left;vertical-align:top}");
            sb.AppendLine("</style>");
            sb.AppendLine("<table class=\"tg\"><thead>");
            sb.AppendLine("  <tr>");
            sb.AppendLine($"<td class=\"tg-hqd7\"><span style=\"font-weight:bold;font-size:9px\">Format No : {(template != null ? template.FormatNo : "")}</span><br>");
            #region date
            // Get the local time zone
            TimeZoneInfo localTimeZone = TimeZoneInfo.Local;

            // Get the time zone by its ID (for example, "Eastern Standard Time")
            TimeZoneInfo targetTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");

            // Get the current date and time
            DateTime currentTime = DateTime.Now;

            // Convert the current time to the target time zone
            DateTime targetTime = TimeZoneInfo.ConvertTime(currentTime, localTimeZone, targetTimeZone);
            //Console.WriteLine("Current Time (Target): " + targetTime.ToString("dd-MM-yyyy HH:mm:ss"));
            #endregion
            if (!string.IsNullOrEmpty(template1.PrintCopy))
            {
                sb.AppendLine($"<span style=\"font-weight:bold;font-size:9px\">Print Type: {template1.PrintCopy}, Printed By: {p_user}, Printed On: {targetTime.ToString("dd-MM-yyyy HH:mm:ss")}</span><br>");
            }
            if (!string.IsNullOrEmpty(template1.PrintReason))
            {
                sb.AppendLine($"<span style=\"font-weight:bold;font-size:9px\">Print Reason: {template1.PrintReason}</span>");
            }
            if (!string.IsNullOrEmpty(template1.PrintReason))
            {
                sb.AppendLine($"<span style=\"font-weight:bold;font-size:9px\">, Print Count: {template1.PrintCount}</span>");
            }
            //sb.AppendLine("    <td class=\"tg-hqd7\">Format No : {(template != null ? template.FormatNo : \"\")}<br>Print Type : MAster Copy, Printed By : Admin, Printed On : 2-5-2024<br>Print Reason : Sample, Print Count : 10</td>");
            sb.AppendLine("  </tr></thead>");
            sb.AppendLine("</table>");

            string htmlString = sb.ToString();
            return htmlString;

        }

    }
}
