//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Text;
using System.IO;
using System.Linq;
using System.Data;
using System.Collections.Generic;
using Newtonsoft.Json;
using Vlims.Common;



// Comment
public static class DocumentPrintConverter
{

    public static List<DocumentPrint> SetAllDocumentPrint(DataSet dataset)
    {
        try
        {
            List<DocumentPrint> result = new List<DocumentPrint>();
            DocumentPrint documentPrintData;
            if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in dataset.Tables[0].Rows)
                {
                    documentPrintData = new DocumentPrint();
                    documentPrintData.DRId = row.IsNull(DocumentPrintConstants.DRId.Trim('@')) ? (short)0 : Convert.ToInt16(row[DocumentPrintConstants.DRId.Trim('@')]);
                    documentPrintData.documenttitle = row.IsNull(DocumentPrintConstants.documenttitle.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.documenttitle.Trim('@')]);
                    documentPrintData.printtype = row.IsNull(DocumentPrintConstants.printtype.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.printtype.Trim('@')]);
                    documentPrintData.DocumentNumber = row.IsNull(DocumentPrintConstants.documentno.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.documentno.Trim('@')]);
                    documentPrintData.noofcopies = row.IsNull(DocumentPrintConstants.noofcopies.Trim('@')) ? (short)0 : Convert.ToInt16(row[DocumentPrintConstants.noofcopies.Trim('@')]);
                    documentPrintData.workflow = row.IsNull(DocumentPrintConstants.workflow.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.workflow.Trim('@')]);
                    documentPrintData.reason = row.IsNull(DocumentPrintConstants.reason.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.reason.Trim('@')]);
                    documentPrintData.CreatedBy = row.IsNull(DocumentPrintConstants.CreatedBy.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.CreatedBy.Trim('@')]);
                    documentPrintData.CreatedDate = row.IsNull(DocumentPrintConstants.CreatedDate.Trim('@')) ? DateTime.MinValue : DatatypeConverter.SetDateTime(row[DocumentPrintConstants.CreatedDate.Trim('@')]);
                    documentPrintData.ModifiedBy = row.IsNull(DocumentPrintConstants.ModifiedBy.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.ModifiedBy.Trim('@')]);
                    documentPrintData.ModifiedDate = row.IsNull(DocumentPrintConstants.ModifiedDate.Trim('@')) ? DateTime.MinValue : DatatypeConverter.SetDateTime(row[DocumentPrintConstants.ModifiedDate.Trim('@')]);
                    documentPrintData.Status = row.IsNull(DocumentPrintConstants.Status.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.Status.Trim('@')]);

                    documentPrintData.BatchNumber = row.IsNull(DocumentPrintConstants.BatchNumber.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.BatchNumber.Trim('@')]);
                    documentPrintData.BatchSize = row.IsNull(DocumentPrintConstants.BatchSize.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.BatchSize.Trim('@')]);

                    documentPrintData.Template = row.IsNull(DocumentPrintConstants.Template.Trim('@')) ? string.Empty : Convert.ToString(row[DocumentPrintConstants.Template.Trim('@')]);
                    documentPrintData.PrintCopy = row.IsNull("PrintCopy_PSY") ? string.Empty : Convert.ToString(row["PrintCopy_PSY"]);
                    documentPrintData.IsActive = row.IsNull("IsActive_PSY") ? false : Convert.ToBoolean(row["IsActive_PSY"]);
                    documentPrintData.PrepId = row.IsNull("DPNID_PSY") ? 0 : Convert.ToInt32(row["DPNID_PSY"]);
                    documentPrintData.printCount = row.IsNull("PrintCount_PSY") ? (short)0 : Convert.ToInt16(row["PrintCount_PSY"]);

                    result.Add(documentPrintData);
                }
            }
            return result;
        }
        catch (System.Exception ex)
        {
            throw;
        }
    }


    public static DocumentPrint SetDocumentPrint(DataSet dataset)
    {
        var result = SetAllDocumentPrint(dataset);
        if (result.Count > 0)
        {
            return result.FirstOrDefault();
        }
        return null;
    }
}

