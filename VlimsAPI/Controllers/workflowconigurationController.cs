//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Authorization;
    using PolicySummary.Common.Entities;
    using PolicySummary.Sheet1.Entities;
    using PolicySummary.Sheet1.Services;
    
    
    /// <summary>
    /// Comment
    /// </summary>
    [ApiController()]
    [Route("api/workflowconiguration")]
    public class workflowconigurationController : ControllerBase
    {
        
        private readonly IworkflowconigurationService workflowconigurationService;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="workflowconigurationService"></param>
        public workflowconigurationController(IworkflowconigurationService workflowconigurationService)
        {
            this.workflowconigurationService = workflowconigurationService;
        }
        
        /// <summary>
        /// This method is used to Get List of workflowconiguration
        /// </summary>
        /// <param name="requestContext"></param>
        [HttpPost()]
        public ActionResult<ResponseContext<workflowconiguration>> GetAllworkflowconiguration(RequestContext requestContext)
        {
            var result = workflowconigurationService.GetAllworkflowconiguration(requestContext);
            return result;
        }
        
        /// <summary>
        /// This method is used to Get workflowconiguration By Id wFCId
        /// </summary>
        /// <param name="wFCId"></param>
        [HttpGet("{wFCId}")]
        public ActionResult<workflowconiguration> GetworkflowconigurationByWFCId(int wFCId)
        {
            var result = workflowconigurationService.GetworkflowconigurationByWFCId(wFCId);
            return result;
        }
        
        /// <summary>
        /// This Method is used to Save workflowconiguration
        /// </summary>
        /// <param name="workflowconiguration"></param>
        [HttpPost("saveworkflowconiguration")]
        public ActionResult<System.Boolean> Saveworkflowconiguration(workflowconiguration workflowconiguration)
        {
            var result = workflowconigurationService.Saveworkflowconiguration(workflowconiguration);
            return result;
        }
        
        /// <summary>
        /// This Method is used to update workflowconiguration
        /// </summary>
        /// <param name="workflowconiguration"></param>
        [HttpPost("updateworkflowconiguration")]
        public ActionResult<System.Boolean> Updateworkflowconiguration(workflowconiguration workflowconiguration)
        {
            var result = workflowconigurationService.Updateworkflowconiguration(workflowconiguration);
            return result;
        }
        
        /// <summary>
        /// This Method is used to Delete workflowconiguration By Id wFCId
        /// </summary>
        /// <param name="wFCId"></param>
        [HttpDelete("{wFCId}")]
        public ActionResult<bool> DeleteworkflowconigurationByWFCId(int wFCId)
        {
            var result = workflowconigurationService.DeleteworkflowconigurationByWFCId(wFCId);
            return result;
        }
        
        /// <summary>
        /// This Method is used to Delete workflowconiguration By Multiple ids wFCIds
        /// </summary>
        /// <param name="wFCIds"></param>
        [HttpDelete("deleteAll")]
        public ActionResult<bool> DeleteAllworkflowconiguration(List<int> wFCIds)
        {
            var result = workflowconigurationService.DeleteAllworkflowconiguration(wFCIds);
            return result;
        }
    }
}
