//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.DocumentMaster.DataAccess
{
    using System;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Vlims.Common;
    using Vlims.DocumentMaster.Entities;
    using System.Xml.Serialization;
    using Vlims.Administration.Entities;


    // Comment
    public static class workflowconigurationConverter
    {

        public static List<workflowconiguration> SetAllworkflowconiguration(DataSet dataset, bool isgetall = true)
        {
            try
            {
                List<workflowconiguration> result = new List<workflowconiguration>();
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    bool isList = dataset.Tables[0].Rows.Count > 1;

                    foreach (DataRow row in dataset.Tables[0].Rows)
                    {
                        workflowconiguration workflowconigurationData = new workflowconiguration();
                        workflowconigurationData.WFCId = Convert.ToString(row[workflowconigurationConstants.WFCId.Trim('@')]);
                        workflowconigurationData.DocumentMasterId = Convert.ToString(row[workflowconigurationConstants.DocumentMasterId.Trim('@')]);
                        workflowconigurationData.workflowName = Convert.ToString(row[workflowconigurationConstants.workflowName_PSY.Trim('@')]);
                        workflowconigurationData.code = Convert.ToString(row[workflowconigurationConstants.code.Trim('@')]);
                        workflowconigurationData.documentstage = Convert.ToString(row[workflowconigurationConstants.documentstage.Trim('@')]);
                        workflowconigurationData.documenttype = Convert.ToString(row[workflowconigurationConstants.documenttype.Trim('@')]);
                        workflowconigurationData.departments = Convert.ToString(row[workflowconigurationConstants.department.Trim('@')]);
                        workflowconigurationData.reviewsCount = DatatypeConverter.SetIntValue(row[workflowconigurationConstants.reviewsCount.Trim('@')]);
                        workflowconigurationData.approvalsCount = DatatypeConverter.SetIntValue(row[workflowconigurationConstants.approvalsCount.Trim('@')]);
                        workflowconigurationData.CreatedBy = Convert.ToString(row[workflowconigurationConstants.CreatedBy.Trim('@')]);
                        workflowconigurationData.CreatedDate = DatatypeConverter.SetDateTime(row[workflowconigurationConstants.CreatedDate.Trim('@')]);
                        workflowconigurationData.ModifiedBy = Convert.ToString(row[workflowconigurationConstants.ModifiedBy.Trim('@')]);
                        workflowconigurationData.ModifiedDate = DatatypeConverter.SetDateTime(row[workflowconigurationConstants.ModifiedDate.Trim('@')]);
                        workflowconigurationData.ModifiedBy = Convert.ToString(row[workflowconigurationConstants.ModifiedBy.Trim('@')]);
                        workflowconigurationData.Status = Convert.ToString(row[workflowconigurationConstants.Status.Trim('@')]);
                        workflowconigurationData.RevisionNumber = Convert.ToInt32(row[workflowconigurationConstants.RevisionNumber.Trim('@')]);
                        if (isgetall)
                            workflowconigurationData.IsParent = Convert.ToBoolean(row[workflowconigurationConstants.IsParent.Trim('@')]);

                        if (dataset.Tables[0].Columns.Contains("Document_PSY"))
                        {
                            string docValue = Convert.ToString(row["Document_PSY"]);
                            if (!string.IsNullOrEmpty(docValue))
                            {
                                // Deserialize the XML data back to a workflowconiguration object
                                var serializer = new XmlSerializer(typeof(workflowconiguration));
                                using (var reader = new StringReader(docValue))
                                {
                                    var documentConfiguration = (workflowconiguration)serializer.Deserialize(reader);
                                    workflowconigurationData.reviewsType = documentConfiguration.reviewsType;
                                    workflowconigurationData.approvalsType = documentConfiguration.approvalsType;
                                    workflowconigurationData.reviewers = documentConfiguration.reviewers;
                                    workflowconigurationData.approvals = documentConfiguration.approvals;
                                    workflowconigurationData.reviewersGroup = documentConfiguration.reviewersGroup;
                                    workflowconigurationData.approvalsGroup = documentConfiguration.approvalsGroup;
                                    workflowconigurationData.department = documentConfiguration.department;
                                }
                            }
                        }

                        result.Add(workflowconigurationData);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw;
            }
        }


        public static workflowconiguration Setworkflowconiguration(DataSet dataset)
        {
            var result = SetAllworkflowconiguration(dataset,false);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
    }
}
