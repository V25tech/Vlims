//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    using Vlims.Entities.Common;
    using Vlims.Entities;


    // Comment
    public class DocumentPreparationData : IDocumentPreparationData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public DocumentPreparationData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllDocumentPreparation(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentPreparationConstants.USP_DocumentPreparation_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetDocumentPreparationByDPNID(string dPNID)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentPreparationConstants.USP_DocumentPreparation_PSY_GET, DocumentPreparationConstants.DPNID, DbType.Int32, dPNID, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveDocumentPreparation(DocumentPreparation documentPreparation)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.Documentmanagerid, Value = documentPreparation.Documentmanagerid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.documenttitle, Value = documentPreparation.documenttitle });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.documentno, Value = documentPreparation.documentno });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.documenttype, Value = documentPreparation.documenttype });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.department, Value = documentPreparation.department });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.document, Value = documentPreparation.document });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.template, Value = documentPreparation.template });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.wokflow, Value = documentPreparation.wokflow });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.details, Value = documentPreparation.details });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.CreatedBy, Value = documentPreparation.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.ModifiedBy, Value = documentPreparation.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentPreparationConstants.USP_DocumentPreparation_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateDocumentPreparation(DocumentPreparation documentPreparation)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.DPNID, Value = documentPreparation.DPNID });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.Documentmanagerid, Value = documentPreparation.Documentmanagerid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.documenttitle, Value = documentPreparation.documenttitle });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.documentno, Value = documentPreparation.documentno });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.documenttype, Value = documentPreparation.documenttype });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.department, Value = documentPreparation.department });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.document, Value = documentPreparation.document });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.template, Value = documentPreparation.template });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.wokflow, Value = documentPreparation.wokflow });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.details, Value = documentPreparation.details });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentPreparationConstants.ModifiedBy, Value = documentPreparation.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentPreparationConstants.USP_DocumentPreparation_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteDocumentPreparationByDPNID(string dPNID)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentPreparationConstants.USP_DocumentPreparation_PSY_DELETE, DocumentPreparationConstants.DPNID, DbType.Int32, dPNID, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllDocumentPreparation(List<int> dPNIDs)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentPreparationConstants.USP_DocumentPreparation_PSY_DELETE_ALL, DocumentPreparationConstants.DPNID, DbType.String, string.Join(',',  dPNIDs), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
