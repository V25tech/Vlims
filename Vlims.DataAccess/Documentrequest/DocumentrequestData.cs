//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    using Vlims.Entities.Common;
    using Vlims.Entities;


    // Comment
    public class DocumentrequestData : IDocumentrequestData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public DocumentrequestData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllDocumentrequest(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetDocumentrequestByDRID(string dRID)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_GET, DocumentrequestConstants.DRID, DbType.Int32, dRID, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveDocumentrequest(Documentrequest documentrequest)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.documentmanagerid, Value = documentrequest.documentmanagerid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.documenttype, Value = documentrequest.documenttype });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.department, Value = documentrequest.department });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.Purpose, Value = documentrequest.Purpose });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = DocumentrequestConstants.ApprovalsCount, Value = documentrequest.ApprovalsCount });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.AssigntoGroup, Value = documentrequest.AssigntoGroup });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.CreatedBy, Value = documentrequest.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.ModifiedBy, Value = documentrequest.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateDocumentrequest(Documentrequest documentrequest)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.DRID, Value = documentrequest.DRID });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.documentmanagerid, Value = documentrequest.documentmanagerid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.documenttype, Value = documentrequest.documenttype });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.department, Value = documentrequest.department });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.Purpose, Value = documentrequest.Purpose });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = DocumentrequestConstants.ApprovalsCount, Value = documentrequest.ApprovalsCount });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.AssigntoGroup, Value = documentrequest.AssigntoGroup });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.ModifiedBy, Value = documentrequest.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteDocumentrequestByDRID(string dRID)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_DELETE, DocumentrequestConstants.DRID, DbType.Int32, dRID, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllDocumentrequest(List<int> dRIDs)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_DELETE_ALL, DocumentrequestConstants.DRID, DbType.String, string.Join(',',  dRIDs), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
