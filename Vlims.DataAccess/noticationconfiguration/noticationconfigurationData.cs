//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using PolicySummary.Common.Entities;
    using PolicySummary.Sheet1.Entities;
    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    
    
    // Comment
    public class noticationconfigurationData : InoticationconfigurationData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public noticationconfigurationData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllnoticationconfiguration(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(noticationconfigurationConstants.USP_noticationconfiguration_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetnoticationconfigurationByNCId(int nCId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(noticationconfigurationConstants.USP_noticationconfiguration_PSY_GET, noticationconfigurationConstants.NCId, DbType.Int32, nCId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool Savenoticationconfiguration(noticationconfiguration noticationconfiguration)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = noticationconfigurationConstants.DocumentMasterId, Value = noticationconfiguration.DocumentMasterId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = noticationconfigurationConstants.CreatedBy, Value = noticationconfiguration.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = noticationconfigurationConstants.ModifiedBy, Value = noticationconfiguration.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(noticationconfigurationConstants.USP_noticationconfiguration_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool Updatenoticationconfiguration(noticationconfiguration noticationconfiguration)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = noticationconfigurationConstants.NCId, Value = noticationconfiguration.NCId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = noticationconfigurationConstants.DocumentMasterId, Value = noticationconfiguration.DocumentMasterId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = noticationconfigurationConstants.ModifiedBy, Value = noticationconfiguration.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(noticationconfigurationConstants.USP_noticationconfiguration_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeletenoticationconfigurationByNCId(int nCId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(noticationconfigurationConstants.USP_noticationconfiguration_PSY_DELETE, noticationconfigurationConstants.NCId, DbType.Int32, nCId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllnoticationconfiguration(List<int> nCIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(noticationconfigurationConstants.USP_noticationconfiguration_PSY_DELETE_ALL, noticationconfigurationConstants.NCId, DbType.String, string.Join(',',  nCIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
