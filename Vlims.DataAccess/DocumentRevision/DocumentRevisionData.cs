//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    using Vlims.Entities.Common;
    using Vlims.Entities;


    // Comment
    public class DocumentRevisionData : IDocumentRevisionData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public DocumentRevisionData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllDocumentRevision(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentRevisionConstants.USP_DocumentRevision_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetDocumentRevisionByDRId(string dRId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentRevisionConstants.USP_DocumentRevision_PSY_GET, DocumentRevisionConstants.DRId, DbType.Int32, dRId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveDocumentRevision(DocumentRevision documentRevision)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.Documentmanagerid, Value = documentRevision.Documentmanagerid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.documenttitle, Value = documentRevision.documenttitle });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.documentno, Value = documentRevision.documentno });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.documenttype, Value = documentRevision.documenttype });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.department, Value = documentRevision.department });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.document, Value = documentRevision.document });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = DocumentRevisionConstants.EffectiveDate, Value = documentRevision.EffectiveDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = DocumentRevisionConstants.Reviewdate, Value = documentRevision.Reviewdate });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.CreatedBy, Value = documentRevision.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.ModifiedBy, Value = documentRevision.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentRevisionConstants.USP_DocumentRevision_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateDocumentRevision(DocumentRevision documentRevision)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.DRId, Value = documentRevision.DRId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.Documentmanagerid, Value = documentRevision.Documentmanagerid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.documenttitle, Value = documentRevision.documenttitle });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.documentno, Value = documentRevision.documentno });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.documenttype, Value = documentRevision.documenttype });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.department, Value = documentRevision.department });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.document, Value = documentRevision.document });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = DocumentRevisionConstants.EffectiveDate, Value = documentRevision.EffectiveDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = DocumentRevisionConstants.Reviewdate, Value = documentRevision.Reviewdate });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentRevisionConstants.ModifiedBy, Value = documentRevision.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentRevisionConstants.USP_DocumentRevision_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteDocumentRevisionByDRId(string dRId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentRevisionConstants.USP_DocumentRevision_PSY_DELETE, DocumentRevisionConstants.DRId, DbType.Int32, dRId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllDocumentRevision(List<int> dRIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentRevisionConstants.USP_DocumentRevision_PSY_DELETE_ALL, DocumentRevisionConstants.DRId, DbType.String, string.Join(',',  dRIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
