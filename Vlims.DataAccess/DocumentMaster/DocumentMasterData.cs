//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    using VAMLibrary.Core;
    using VAMLibrary.Core.Common;
    using Vlims.Entities.Common;
    using Vlims.Entities;


    // Comment
    public class DocumentMasterData : IDocumentMasterData
    {
        
        private readonly DataAccessHelper dataAccessHelper;
        
        public DocumentMasterData(DataAccessHelper dataAccessHelper)
        {
            this.dataAccessHelper = dataAccessHelper;
        }
        
        public DataSet GetAllDocumentMaster(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentMasterConstants.USP_DocumentMaster_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DataSet GetDocumentMasterByDmid(int dmid)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentMasterConstants.USP_DocumentMaster_PSY_GET, DocumentMasterConstants.Dmid, DbType.Int32, dmid, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveDocumentMaster(DocumentMaster documentMaster)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.Documentypeconfiguration, Value = documentMaster.Documentypeconfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.Documentemplateonfiguration, Value = documentMaster.Documentemplateonfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.WorkFlowConfiguration, Value = documentMaster.WorkFlowConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.NotificationConfiguration, Value = documentMaster.NotificationConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.DashboardConfiguration, Value = documentMaster.DashboardConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.CreatedBy, Value = documentMaster.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.ModifiedBy, Value = documentMaster.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentMasterConstants.USP_DocumentMaster_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateDocumentMaster(DocumentMaster documentMaster)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.Dmid, Value = documentMaster.Dmid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.Documentypeconfiguration, Value = documentMaster.Documentypeconfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.Documentemplateonfiguration, Value = documentMaster.Documentemplateonfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.WorkFlowConfiguration, Value = documentMaster.WorkFlowConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.NotificationConfiguration, Value = documentMaster.NotificationConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.DashboardConfiguration, Value = documentMaster.DashboardConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentMasterConstants.ModifiedBy, Value = documentMaster.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentMasterConstants.USP_DocumentMaster_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteDocumentMasterByDmid(int dmid)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentMasterConstants.USP_DocumentMaster_PSY_DELETE, DocumentMasterConstants.Dmid, DbType.Int32, dmid, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllDocumentMaster(List<int> dmids)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentMasterConstants.USP_DocumentMaster_PSY_DELETE_ALL, DocumentMasterConstants.Dmid, DbType.String, string.Join(',',  dmids), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
