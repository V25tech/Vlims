//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using PolicySummary.Common.Entities;
    using PolicySummary.Sheet1.Entities;
    using PolicySummary.Sheet1.Data;
    
    
    // Comment
    public class AdditionalTaskService : IAdditionalTaskService
    {
        
        private readonly IAdditionalTaskData additionalTaskData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="additionalTaskData"></param>
        public AdditionalTaskService(IAdditionalTaskData additionalTaskData)
        {
            this.additionalTaskData = additionalTaskData;
        }
        
        public ResponseContext<AdditionalTask> GetAllAdditionalTask(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = additionalTaskData.GetAllAdditionalTask(requestContext);
                List<AdditionalTask> result = AdditionalTaskConverter.SetAllAdditionalTask(dataset);
                return new ResponseContext<AdditionalTask>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public AdditionalTask GetAdditionalTaskByATID(string aTID)
        {
            try
            {
                DataSet dataset = additionalTaskData.GetAdditionalTaskByATID(aTID);
                AdditionalTask result = AdditionalTaskConverter.SetAdditionalTask(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveAdditionalTask(AdditionalTask additionalTask)
        {
            try
            {
                String validationMessages = AdditionalTaskValidator.IsValidAdditionalTask(additionalTask);
                if (validationMessages.Length <= 0)
                {
                    var result = additionalTaskData.SaveAdditionalTask(additionalTask);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateAdditionalTask(AdditionalTask additionalTask)
        {
            try
            {
                String validationMessages = AdditionalTaskValidator.IsValidAdditionalTask(additionalTask);
                if (validationMessages.Length <= 0)
                {
                    bool result = additionalTaskData.UpdateAdditionalTask(additionalTask);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAdditionalTaskByATID(string aTID)
        {
            try
            {
                return additionalTaskData.DeleteAdditionalTaskByATID(aTID);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllAdditionalTask(List<int> aTIDs)
        {
            try
            {
                return additionalTaskData.DeleteAllAdditionalTask(aTIDs);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
