//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    
    using VAMLIbrary.Core.Extentions;
    using Vlims.Entities;



    // Comment
    public static class DocumentrequestConverter
    {
        
        public static List<Documentrequest> SetAllDocumentrequest(DataSet dataset)
        {
            try
            {
                List<Documentrequest> result = new List<Documentrequest>();
                Documentrequest documentrequestData;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        documentrequestData = new Documentrequest();
                        documentrequestData.DRID = Convert.ToString(row[DocumentrequestConstants.DRID.TrimAt()]);
                        documentrequestData.documentmanagerid = Convert.ToString(row[DocumentrequestConstants.documentmanagerid.TrimAt()]);
                        documentrequestData.documenttype = Convert.ToString(row[DocumentrequestConstants.documenttype.TrimAt()]);
                        documentrequestData.department = Convert.ToString(row[DocumentrequestConstants.department.TrimAt()]);
                        documentrequestData.Purpose = Convert.ToString(row[DocumentrequestConstants.Purpose.TrimAt()]);
                        documentrequestData.ApprovalsCount = DatatypeConverter.SetIntValue(row[DocumentrequestConstants.ApprovalsCount.TrimAt()]);
                        documentrequestData.AssigntoGroup = Convert.ToString(row[DocumentrequestConstants.AssigntoGroup.TrimAt()]);
                        documentrequestData.CreatedBy = Convert.ToString(row[DocumentrequestConstants.CreatedBy.TrimAt()]);
                        documentrequestData.CreatedDate = DatatypeConverter.SetDateTime(row[DocumentrequestConstants.CreatedDate.TrimAt()]);
                        documentrequestData.ModifiedBy = Convert.ToString(row[DocumentrequestConstants.ModifiedBy.TrimAt()]);
                        documentrequestData.ModifiedDate = DatatypeConverter.SetDateTime(row[DocumentrequestConstants.ModifiedDate.TrimAt()]);
                        result.Add(documentrequestData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static Documentrequest SetDocumentrequest(DataSet dataset)
        {
            var result = SetAllDocumentrequest(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
    }
}
