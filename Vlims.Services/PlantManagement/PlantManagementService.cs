//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using PolicySummary.Common.Entities;
    using PolicySummary.Sheet1.Entities;
    using PolicySummary.Sheet1.Data;
    
    
    // Comment
    public class PlantManagementService : IPlantManagementService
    {
        
        private readonly IPlantManagementData plantManagementData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="plantManagementData"></param>
        public PlantManagementService(IPlantManagementData plantManagementData)
        {
            this.plantManagementData = plantManagementData;
        }
        
        public ResponseContext<PlantManagement> GetAllPlantManagement(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = plantManagementData.GetAllPlantManagement(requestContext);
                List<PlantManagement> result = PlantManagementConverter.SetAllPlantManagement(dataset);
                return new ResponseContext<PlantManagement>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public PlantManagement GetPlantManagementByPMId(string pMId)
        {
            try
            {
                DataSet dataset = plantManagementData.GetPlantManagementByPMId(pMId);
                PlantManagement result = PlantManagementConverter.SetPlantManagement(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SavePlantManagement(PlantManagement plantManagement)
        {
            try
            {
                String validationMessages = PlantManagementValidator.IsValidPlantManagement(plantManagement);
                if (validationMessages.Length <= 0)
                {
                    var result = plantManagementData.SavePlantManagement(plantManagement);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdatePlantManagement(PlantManagement plantManagement)
        {
            try
            {
                String validationMessages = PlantManagementValidator.IsValidPlantManagement(plantManagement);
                if (validationMessages.Length <= 0)
                {
                    bool result = plantManagementData.UpdatePlantManagement(plantManagement);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeletePlantManagementByPMId(string pMId)
        {
            try
            {
                return plantManagementData.DeletePlantManagementByPMId(pMId);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllPlantManagement(List<int> pMIds)
        {
            try
            {
                return plantManagementData.DeleteAllPlantManagement(pMIds);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
