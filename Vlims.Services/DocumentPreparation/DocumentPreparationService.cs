//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    
    
    using PolicySummary.Sheet1.Data;
    
    
    // Comment
    public class DocumentPreparationService : IDocumentPreparationService
    {
        
        private readonly IDocumentPreparationData documentPreparationData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="documentPreparationData"></param>
        public DocumentPreparationService(IDocumentPreparationData documentPreparationData)
        {
            this.documentPreparationData = documentPreparationData;
        }
        
        public ResponseContext<DocumentPreparation> GetAllDocumentPreparation(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = documentPreparationData.GetAllDocumentPreparation(requestContext);
                List<DocumentPreparation> result = DocumentPreparationConverter.SetAllDocumentPreparation(dataset);
                return new ResponseContext<DocumentPreparation>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DocumentPreparation GetDocumentPreparationByDPNID(string dPNID)
        {
            try
            {
                DataSet dataset = documentPreparationData.GetDocumentPreparationByDPNID(dPNID);
                DocumentPreparation result = DocumentPreparationConverter.SetDocumentPreparation(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveDocumentPreparation(DocumentPreparation documentPreparation)
        {
            try
            {
                String validationMessages = DocumentPreparationValidator.IsValidDocumentPreparation(documentPreparation);
                if (validationMessages.Length <= 0)
                {
                    var result = documentPreparationData.SaveDocumentPreparation(documentPreparation);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateDocumentPreparation(DocumentPreparation documentPreparation)
        {
            try
            {
                String validationMessages = DocumentPreparationValidator.IsValidDocumentPreparation(documentPreparation);
                if (validationMessages.Length <= 0)
                {
                    bool result = documentPreparationData.UpdateDocumentPreparation(documentPreparation);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteDocumentPreparationByDPNID(string dPNID)
        {
            try
            {
                return documentPreparationData.DeleteDocumentPreparationByDPNID(dPNID);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllDocumentPreparation(List<int> dPNIDs)
        {
            try
            {
                return documentPreparationData.DeleteAllDocumentPreparation(dPNIDs);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
