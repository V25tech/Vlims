//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    
    
    using PolicySummary.Sheet1.Data;
    
    
    // Comment
    public class HierarchyManagementService : IHierarchyManagementService
    {
        
        private readonly IHierarchyManagementData hierarchyManagementData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="hierarchyManagementData"></param>
        public HierarchyManagementService(IHierarchyManagementData hierarchyManagementData)
        {
            this.hierarchyManagementData = hierarchyManagementData;
        }
        
        public ResponseContext<HierarchyManagement> GetAllHierarchyManagement(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = hierarchyManagementData.GetAllHierarchyManagement(requestContext);
                List<HierarchyManagement> result = HierarchyManagementConverter.SetAllHierarchyManagement(dataset);
                return new ResponseContext<HierarchyManagement>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public HierarchyManagement GetHierarchyManagementByHMId(string hMId)
        {
            try
            {
                DataSet dataset = hierarchyManagementData.GetHierarchyManagementByHMId(hMId);
                HierarchyManagement result = HierarchyManagementConverter.SetHierarchyManagement(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveHierarchyManagement(HierarchyManagement hierarchyManagement)
        {
            try
            {
                String validationMessages = HierarchyManagementValidator.IsValidHierarchyManagement(hierarchyManagement);
                if (validationMessages.Length <= 0)
                {
                    var result = hierarchyManagementData.SaveHierarchyManagement(hierarchyManagement);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateHierarchyManagement(HierarchyManagement hierarchyManagement)
        {
            try
            {
                String validationMessages = HierarchyManagementValidator.IsValidHierarchyManagement(hierarchyManagement);
                if (validationMessages.Length <= 0)
                {
                    bool result = hierarchyManagementData.UpdateHierarchyManagement(hierarchyManagement);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteHierarchyManagementByHMId(string hMId)
        {
            try
            {
                return hierarchyManagementData.DeleteHierarchyManagementByHMId(hMId);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllHierarchyManagement(List<int> hMIds)
        {
            try
            {
                return hierarchyManagementData.DeleteAllHierarchyManagement(hMIds);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
