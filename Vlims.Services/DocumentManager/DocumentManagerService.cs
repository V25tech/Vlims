//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using PolicySummary.Common.Entities;
    using PolicySummary.Sheet1.Entities;
    using PolicySummary.Sheet1.Data;
    
    
    // Comment
    public class DocumentManagerService : IDocumentManagerService
    {
        
        private readonly IDocumentManagerData documentManagerData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="documentManagerData"></param>
        public DocumentManagerService(IDocumentManagerData documentManagerData)
        {
            this.documentManagerData = documentManagerData;
        }
        
        public ResponseContext<DocumentManager> GetAllDocumentManager(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = documentManagerData.GetAllDocumentManager(requestContext);
                List<DocumentManager> result = DocumentManagerConverter.SetAllDocumentManager(dataset);
                return new ResponseContext<DocumentManager>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public DocumentManager GetDocumentManagerByDMGId(int dMGId)
        {
            try
            {
                DataSet dataset = documentManagerData.GetDocumentManagerByDMGId(dMGId);
                DocumentManager result = DocumentManagerConverter.SetDocumentManager(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveDocumentManager(DocumentManager documentManager)
        {
            try
            {
                String validationMessages = DocumentManagerValidator.IsValidDocumentManager(documentManager);
                if (validationMessages.Length <= 0)
                {
                    var result = documentManagerData.SaveDocumentManager(documentManager);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateDocumentManager(DocumentManager documentManager)
        {
            try
            {
                String validationMessages = DocumentManagerValidator.IsValidDocumentManager(documentManager);
                if (validationMessages.Length <= 0)
                {
                    bool result = documentManagerData.UpdateDocumentManager(documentManager);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteDocumentManagerByDMGId(int dMGId)
        {
            try
            {
                return documentManagerData.DeleteDocumentManagerByDMGId(dMGId);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllDocumentManager(List<int> dMGIds)
        {
            try
            {
                return documentManagerData.DeleteAllDocumentManager(dMGIds);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
