//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using PolicySummary.Common.Entities;
    using PolicySummary.Sheet1.Entities;
    using PolicySummary.Sheet1.Data;
    
    
    // Comment
    public class RoleConfigurationService : IRoleConfigurationService
    {
        
        private readonly IRoleConfigurationData roleConfigurationData;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="roleConfigurationData"></param>
        public RoleConfigurationService(IRoleConfigurationData roleConfigurationData)
        {
            this.roleConfigurationData = roleConfigurationData;
        }
        
        public ResponseContext<RoleConfiguration> GetAllRoleConfiguration(RequestContext requestContext)
        {
            try
            {
                DataSet dataset = roleConfigurationData.GetAllRoleConfiguration(requestContext);
                List<RoleConfiguration> result = RoleConfigurationConverter.SetAllRoleConfiguration(dataset);
                return new ResponseContext<RoleConfiguration>() { RowCount = CommonConverter.SetRowsCount(dataset), Response = result };
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public RoleConfiguration GetRoleConfigurationByROCFId(string rOCFId)
        {
            try
            {
                DataSet dataset = roleConfigurationData.GetRoleConfigurationByROCFId(rOCFId);
                RoleConfiguration result = RoleConfigurationConverter.SetRoleConfiguration(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool SaveRoleConfiguration(RoleConfiguration roleConfiguration)
        {
            try
            {
                String validationMessages = RoleConfigurationValidator.IsValidRoleConfiguration(roleConfiguration);
                if (validationMessages.Length <= 0)
                {
                    var result = roleConfigurationData.SaveRoleConfiguration(roleConfiguration);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool UpdateRoleConfiguration(RoleConfiguration roleConfiguration)
        {
            try
            {
                String validationMessages = RoleConfigurationValidator.IsValidRoleConfiguration(roleConfiguration);
                if (validationMessages.Length <= 0)
                {
                    bool result = roleConfigurationData.UpdateRoleConfiguration(roleConfiguration);
                    return result;
                }
                throw new System.Exception(validationMessages);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteRoleConfigurationByROCFId(string rOCFId)
        {
            try
            {
                return roleConfigurationData.DeleteRoleConfigurationByROCFId(rOCFId);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteAllRoleConfiguration(List<int> rOCFIds)
        {
            try
            {
                return roleConfigurationData.DeleteAllRoleConfiguration(rOCFIds);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public List<RoleConfiguration> GetRoleConfigurationByHierarchyManagementId(System.Int32? hMId)
        {
            try
            {
                DataSet dataset = roleConfigurationData.GetRoleConfigurationByHierarchyManagementId(hMId);
                List<RoleConfiguration> result = RoleConfigurationConverter.SetAllRoleConfiguration(dataset);
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public bool DeleteRoleConfigurationByHierarchyManagementId(System.Int32? hMId)
        {
            try
            {
                return roleConfigurationData.DeleteRoleConfigurationByHierarchyManagementId(hMId);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
