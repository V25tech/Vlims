//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Administration.DataAccess
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Vlims.Administration.Entities;
    using Vlims.Common;


    // Comment
    public static class UserConfigurationValidator
    {

        public static string IsValidUserConfiguration(UserConfiguration userConfiguration)
        {
            try
            {
                StringBuilder validationMessages = new StringBuilder();
                ValidationHelper validationHelper = new ValidationHelper();
                //validationMessages.Append(validationHelper.NullCheckValidator(userConfiguration.UCFId, nameof(userConfiguration.UCFId)));
                //validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.UCFId,50, nameof(userConfiguration.UCFId)));
                validationMessages.Append(validationHelper.NullCheckValidator(userConfiguration.UserManagementID, nameof(userConfiguration.UserManagementID)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.UserManagementID, 150, nameof(userConfiguration.UserManagementID)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.FirstName, 150, nameof(userConfiguration.FirstName)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.LastName, 150, nameof(userConfiguration.LastName)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.UserID, 150, nameof(userConfiguration.UserID)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.Department, 500, nameof(userConfiguration.Department)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.Role, 150, nameof(userConfiguration.Role)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.Doj, 150, nameof(userConfiguration.Doj)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.EmailId, 150, nameof(userConfiguration.EmailId)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.Activedirectory, 150, nameof(userConfiguration.Activedirectory)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.Standarduser, 150, nameof(userConfiguration.Standarduser)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.CreatedBy, 150, nameof(userConfiguration.CreatedBy)));
                validationMessages.Append(validationHelper.LengthCheckValidator(userConfiguration.ModifiedBy, 150, nameof(userConfiguration.ModifiedBy)));
                if (!String.IsNullOrEmpty(validationMessages.ToString()))
                {
                    return Convert.ToString(validationMessages.Remove(validationMessages.ToString().LastIndexOf(','), 1));
                }
                else
                {
                    return Convert.ToString(validationMessages);
                }
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static string IsValidPasswordConfiguration(PasswordChangeConfig passwordChangeConfig)
        {
            try
            {
                StringBuilder validationMessages = new StringBuilder();
                ValidationHelper validationHelper = new ValidationHelper();
                validationMessages.Append(validationHelper.NullCheckValidator(passwordChangeConfig.UserID, nameof(passwordChangeConfig.UserID)));
                validationMessages.Append(validationHelper.LengthCheckValidator(passwordChangeConfig.UserID, 150, nameof(passwordChangeConfig.UserID)));
                validationMessages.Append(validationHelper.NullCheckValidator(passwordChangeConfig.Password, nameof(passwordChangeConfig.Password)));
                validationMessages.Append(validationHelper.NullCheckValidator(passwordChangeConfig.OldPassword, nameof(passwordChangeConfig.OldPassword)));

                if (!String.IsNullOrEmpty(validationMessages.ToString()))
                {
                    return Convert.ToString(validationMessages.Remove(validationMessages.ToString().LastIndexOf(','), 1));
                }
                else
                {
                    return Convert.ToString(validationMessages);
                }
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }


    }
}
