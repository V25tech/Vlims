//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Vlims.Common;
    using Vlims.Administration.Entities;
    using System.Xml.Serialization;



    // Comment
    public static class SetFunctionalProfileData
    {



        public static DataSet GetAllSetFunctionalProfile(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(SetFunctionalProfileConstants.USP_SetFunctionalProfile_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static DataSet GetSetFunctionalProfileBySFPID(System.Boolean? sFPID)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(SetFunctionalProfileConstants.USP_SetFunctionalProfile_PSY_GET, SetFunctionalProfileConstants.SFPID, DbType.Int32, sFPID, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static bool SaveSetFunctionalProfile(setfuctionalprofile setFunctionalProfile)
        {
            try
            {
                var serializer = new XmlSerializer(typeof(setfuctionalprofile));
                // Create a StringWriter to hold the XML data
                var writer = new StringWriter();
                // Serialize the Person object to XML and write it to the StringWriter
                serializer.Serialize(writer, setFunctionalProfile);
                // Get the XML string from the StringWriter
                string xmlString = writer.ToString();
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = SetFunctionalProfileConstants.Role, Value = setFunctionalProfile.role });
                sqlparms.Add(new SqlParameter { DbType = DbType.Xml, ParameterName = SetFunctionalProfileConstants.Document, Value = xmlString });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = SetFunctionalProfileConstants.CreatedBy, Value = setFunctionalProfile.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = SetFunctionalProfileConstants.ModifiedBy, Value = setFunctionalProfile.ModifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = SetFunctionalProfileConstants.RevisionNumber, Value = setFunctionalProfile.RevisionNumber });

                Object result = dataAccessHelper.ExecuteStoredProcedure(SetFunctionalProfileConstants.USP_SetFunctionalProfile_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static bool UpdateSetFunctionalProfile(setfuctionalprofile setFunctionalProfile)
        {
            try
            {
                var serializer = new XmlSerializer(typeof(setfuctionalprofile));
                // Create a StringWriter to hold the XML data
                var writer = new StringWriter();
                // Serialize the Person object to XML and write it to the StringWriter
                serializer.Serialize(writer, setFunctionalProfile);
                // Get the XML string from the StringWriter
                string xmlString = writer.ToString();
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = SetFunctionalProfileConstants.SFPID, Value = setFunctionalProfile.sfpid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = SetFunctionalProfileConstants.Role, Value = setFunctionalProfile.role });
                sqlparms.Add(new SqlParameter { DbType = DbType.Xml, ParameterName = SetFunctionalProfileConstants.Document, Value = xmlString });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = SetFunctionalProfileConstants.ModifiedBy, Value = setFunctionalProfile.ModifiedBy });
                //sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = SetFunctionalProfileConstants.ModifiedBy, Value = setFunctionalProfile.ModifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = SetFunctionalProfileConstants.RevisionNumber, Value = setFunctionalProfile.RevisionNumber });

                Object result = dataAccessHelper.ExecuteStoredProcedure(SetFunctionalProfileConstants.USP_SetFunctionalProfile_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static bool DeleteSetFunctionalProfileBySFPID(System.Boolean? sFPID)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(SetFunctionalProfileConstants.USP_SetFunctionalProfile_PSY_DELETE, SetFunctionalProfileConstants.SFPID, DbType.Int32, sFPID, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static bool DeleteAllSetFunctionalProfile(List<int> sFPIDs)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(SetFunctionalProfileConstants.USP_SetFunctionalProfile_PSY_DELETE_ALL, SetFunctionalProfileConstants.SFPID, DbType.String, string.Join(',', sFPIDs), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
